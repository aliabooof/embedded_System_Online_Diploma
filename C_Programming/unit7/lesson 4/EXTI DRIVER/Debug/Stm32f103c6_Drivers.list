
lcd_keybad_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000524  0800052c  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  0001052c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  0800052c  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800052c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800052c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f01  00000000  00000000  00010555  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006e4  00000000  00000000  00013456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000478  00000000  00000000  00013b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000f8  00000000  00000000  00013fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b0  00000000  00000000  000140b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f88  00000000  00000000  00014160  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000198a  00000000  00000000  000160e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007f5f  00000000  00000000  00017a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001f9d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000278  00000000  00000000  0001fa4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800050c 	.word	0x0800050c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800050c 	.word	0x0800050c

08000170 <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->CFGR |= (5<<11);
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <clock_init+0x3c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <clock_init+0x3c>)
 800017a:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800017e:	6053      	str	r3, [r2, #4]
	RCC_TIM1_CLK_EN();
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <clock_init+0x3c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <clock_init+0x3c>)
 8000186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800018a:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <clock_init+0x3c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <clock_init+0x3c>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <clock_init+0x3c>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <clock_init+0x3c>)
 800019e:	f043 0308 	orr.w	r3, r3, #8
 80001a2:	6193      	str	r3, [r2, #24]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <main>:
	MCAL_GPIO_Init(GPIOB, &PinCfg);

}*/
GPIO_PIN_Config_t* PinCfg ;

int main(void) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
			LCD_WRITE_CHAR(key_pressed);
			break;
		}

	}*/
	clock_init();
 80001b4:	f7ff ffdc 	bl	8000170 <clock_init>
	PinCfg->GPIO_PinNumber=GPIO_PIN_13;
 80001b8:	4b11      	ldr	r3, [pc, #68]	; (8000200 <main+0x50>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001c0:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80001c2:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <main+0x50>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2204      	movs	r2, #4
 80001c8:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <main+0x50>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2201      	movs	r2, #1
 80001d0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 80001d2:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <main+0x50>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4619      	mov	r1, r3
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <main+0x54>)
 80001da:	f000 f8a1 	bl	8000320 <MCAL_GPIO_Init>


	while(1){
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	4807      	ldr	r0, [pc, #28]	; (8000204 <main+0x54>)
 80001e6:	f000 f927 	bl	8000438 <MCAL_GPIO_WritePin>
		delay(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 f93b 	bl	8000468 <delay>

		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f8:	4802      	ldr	r0, [pc, #8]	; (8000204 <main+0x54>)
 80001fa:	f000 f91d 	bl	8000438 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80001fe:	e7ee      	b.n	80001de <main+0x2e>
 8000200:	2000001c 	.word	0x2000001c
 8000204:	40010c00 	.word	0x40010c00

08000208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800020a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800020c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <LoopForever+0x6>)
  ldr r1, =_edata
 8000212:	490d      	ldr	r1, [pc, #52]	; (8000248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000214:	4a0d      	ldr	r2, [pc, #52]	; (800024c <LoopForever+0xe>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000218:	e002      	b.n	8000220 <LoopCopyDataInit>

0800021a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800021c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021e:	3304      	adds	r3, #4

08000220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000224:	d3f9      	bcc.n	800021a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000226:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000228:	4c0a      	ldr	r4, [pc, #40]	; (8000254 <LoopForever+0x16>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800022c:	e001      	b.n	8000232 <LoopFillZerobss>

0800022e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000230:	3204      	adds	r2, #4

08000232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000234:	d3fb      	bcc.n	800022e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000236:	f000 f945 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023a:	f7ff ffb9 	bl	80001b0 <main>

0800023e <LoopForever>:

LoopForever:
    b LoopForever
 800023e:	e7fe      	b.n	800023e <LoopForever>
  ldr   r0, =_estack
 8000240:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000248:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800024c:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 8000250:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000254:	20000020 	.word	0x20000020

08000258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <ADC1_2_IRQHandler>

0800025a <Get_CRLH_position>:
 *      Author: aliab
 */

#include "stm32_f103c6_Driver.h"

uint16_t Get_CRLH_position(uint16_t PinNumber){
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	4603      	mov	r3, r0
 8000262:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b80      	cmp	r3, #128	; 0x80
 8000268:	d042      	beq.n	80002f0 <Get_CRLH_position+0x96>
 800026a:	2b80      	cmp	r3, #128	; 0x80
 800026c:	dc11      	bgt.n	8000292 <Get_CRLH_position+0x38>
 800026e:	2b08      	cmp	r3, #8
 8000270:	d036      	beq.n	80002e0 <Get_CRLH_position+0x86>
 8000272:	2b08      	cmp	r3, #8
 8000274:	dc06      	bgt.n	8000284 <Get_CRLH_position+0x2a>
 8000276:	2b02      	cmp	r3, #2
 8000278:	d02e      	beq.n	80002d8 <Get_CRLH_position+0x7e>
 800027a:	2b04      	cmp	r3, #4
 800027c:	d02e      	beq.n	80002dc <Get_CRLH_position+0x82>
 800027e:	2b01      	cmp	r3, #1
 8000280:	d028      	beq.n	80002d4 <Get_CRLH_position+0x7a>
 8000282:	e047      	b.n	8000314 <Get_CRLH_position+0xba>
 8000284:	2b20      	cmp	r3, #32
 8000286:	d02f      	beq.n	80002e8 <Get_CRLH_position+0x8e>
 8000288:	2b40      	cmp	r3, #64	; 0x40
 800028a:	d02f      	beq.n	80002ec <Get_CRLH_position+0x92>
 800028c:	2b10      	cmp	r3, #16
 800028e:	d029      	beq.n	80002e4 <Get_CRLH_position+0x8a>
 8000290:	e040      	b.n	8000314 <Get_CRLH_position+0xba>
 8000292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000296:	d033      	beq.n	8000300 <Get_CRLH_position+0xa6>
 8000298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800029c:	dc09      	bgt.n	80002b2 <Get_CRLH_position+0x58>
 800029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002a2:	d029      	beq.n	80002f8 <Get_CRLH_position+0x9e>
 80002a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002a8:	d028      	beq.n	80002fc <Get_CRLH_position+0xa2>
 80002aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ae:	d021      	beq.n	80002f4 <Get_CRLH_position+0x9a>
 80002b0:	e030      	b.n	8000314 <Get_CRLH_position+0xba>
 80002b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002b6:	d027      	beq.n	8000308 <Get_CRLH_position+0xae>
 80002b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002bc:	dc03      	bgt.n	80002c6 <Get_CRLH_position+0x6c>
 80002be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002c2:	d01f      	beq.n	8000304 <Get_CRLH_position+0xaa>
 80002c4:	e026      	b.n	8000314 <Get_CRLH_position+0xba>
 80002c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002ca:	d01f      	beq.n	800030c <Get_CRLH_position+0xb2>
 80002cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d0:	d01e      	beq.n	8000310 <Get_CRLH_position+0xb6>
 80002d2:	e01f      	b.n	8000314 <Get_CRLH_position+0xba>
	//position for pins from 0>>>7 in CRL register
	case GPIO_PIN_0  : return 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	e01e      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_1  : return 4;
 80002d8:	2304      	movs	r3, #4
 80002da:	e01c      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_2  : return 8;
 80002dc:	2308      	movs	r3, #8
 80002de:	e01a      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_3  : return 12;
 80002e0:	230c      	movs	r3, #12
 80002e2:	e018      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_4  : return 16;
 80002e4:	2310      	movs	r3, #16
 80002e6:	e016      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_5  : return 20;
 80002e8:	2314      	movs	r3, #20
 80002ea:	e014      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_6  : return 24;
 80002ec:	2318      	movs	r3, #24
 80002ee:	e012      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_7  : return 28;
 80002f0:	231c      	movs	r3, #28
 80002f2:	e010      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	//position for pins from 8>>>15 in CRH register
	case GPIO_PIN_8  : return 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	e00e      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_9  : return 4;
 80002f8:	2304      	movs	r3, #4
 80002fa:	e00c      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_10 : return 8;
 80002fc:	2308      	movs	r3, #8
 80002fe:	e00a      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_11 : return 12;
 8000300:	230c      	movs	r3, #12
 8000302:	e008      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_12 : return 16;
 8000304:	2310      	movs	r3, #16
 8000306:	e006      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_13 : return 20;
 8000308:	2314      	movs	r3, #20
 800030a:	e004      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_14 : return 24;
 800030c:	2318      	movs	r3, #24
 800030e:	e002      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	case GPIO_PIN_15 : return 28;
 8000310:	231c      	movs	r3, #28
 8000312:	e000      	b.n	8000316 <Get_CRLH_position+0xbc>
	break;
	}
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <MCAL_GPIO_Init>:
 * Note			-stm32f103c6 MCU has GPIO A,B,C,D,E modules
 * 				 but LQFPP48 has only GPIO A ,B and part of E,D exported as external pins from THE MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PIN_Config_t * PinConfig){
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	uint8_t pin_config = 0;
 800032a:	2300      	movs	r3, #0
 800032c:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t *ConfigRegister = NULL;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
	//pins from 0>>>7 in CRL register and from 8>>>15 in CRH register
	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->CRL) :(&GPIOx->CRH);
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	b29b      	uxth	r3, r3
 8000338:	2bff      	cmp	r3, #255	; 0xff
 800033a:	d801      	bhi.n	8000340 <MCAL_GPIO_Init+0x20>
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	e001      	b.n	8000344 <MCAL_GPIO_Init+0x24>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3304      	adds	r3, #4
 8000344:	60bb      	str	r3, [r7, #8]

	//resets pin state before configure it
	* ConfigRegister &= ~ (0XF << (Get_CRLH_position(PinConfig->GPIO_PinNumber)));
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	b29b      	uxth	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff84 	bl	800025a <Get_CRLH_position>
 8000352:	4603      	mov	r3, r0
 8000354:	461a      	mov	r2, r3
 8000356:	230f      	movs	r3, #15
 8000358:	4093      	lsls	r3, r2
 800035a:	43da      	mvns	r2, r3
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	401a      	ands	r2, r3
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	601a      	str	r2, [r3, #0]
	// if the pin is output
	if(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG_AF_OD )
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	789b      	ldrb	r3, [r3, #2]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b04      	cmp	r3, #4
 800036e:	d00e      	beq.n	800038e <MCAL_GPIO_Init+0x6e>
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	789b      	ldrb	r3, [r3, #2]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b05      	cmp	r3, #5
 8000378:	d009      	beq.n	800038e <MCAL_GPIO_Init+0x6e>
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	789b      	ldrb	r3, [r3, #2]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b06      	cmp	r3, #6
 8000382:	d004      	beq.n	800038e <MCAL_GPIO_Init+0x6e>
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	789b      	ldrb	r3, [r3, #2]
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b07      	cmp	r3, #7
 800038c:	d110      	bne.n	80003b0 <MCAL_GPIO_Init+0x90>
	{
		//CNFy[1:0] MODEy[1:0] 4bits for pin configuration
		pin_config = ( (((PinConfig->GPIO_PinMode) - 4) <<2) | ((PinConfig->GPIO_OUTPUT_SPEED) & 0x0F));
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	789b      	ldrb	r3, [r3, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	3b04      	subs	r3, #4
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	b25a      	sxtb	r2, r3
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	78db      	ldrb	r3, [r3, #3]
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	b25b      	sxtb	r3, r3
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	e030      	b.n	8000412 <MCAL_GPIO_Init+0xf2>

	}
	// if the pin is input
	else{ // MODE = 00 :input mode (reset state)

		if(PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG ||PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	789b      	ldrb	r3, [r3, #2]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <MCAL_GPIO_Init+0xa4>
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d105      	bne.n	80003d0 <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( ((PinConfig->GPIO_PinMode) <<2) | (0x0 & 0x0F));
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	e020      	b.n	8000412 <MCAL_GPIO_Init+0xf2>

		}
		else if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_AF) //works as floating
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	789b      	ldrb	r3, [r3, #2]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b08      	cmp	r3, #8
 80003d8:	d102      	bne.n	80003e0 <MCAL_GPIO_Init+0xc0>
		{
			pin_config = ( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0 & 0x0F));
 80003da:	2304      	movs	r3, #4
 80003dc:	73fb      	strb	r3, [r7, #15]
 80003de:	e018      	b.n	8000412 <MCAL_GPIO_Init+0xf2>

		}
		else
		{
			pin_config = ( ((GPIO_MODE_INPUT_PU) <<2) | (0x0 & 0x0F));
 80003e0:	2308      	movs	r3, #8
 80003e2:	73fb      	strb	r3, [r7, #15]
			//Table 20. Port bit configuration table
			if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d108      	bne.n	8000400 <MCAL_GPIO_Init+0xe0>
			{
				//set PxODR register to 1 if its input  pull up mode
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	e008      	b.n	8000412 <MCAL_GPIO_Init+0xf2>
			}
			else
			{
				//set PxODR register to 0 if its input  pull up mode
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	881b      	ldrh	r3, [r3, #0]
 8000404:	b29b      	uxth	r3, r3
 8000406:	43da      	mvns	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	401a      	ands	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	60da      	str	r2, [r3, #12]
		}



	}
	* ConfigRegister |= ( (pin_config) << Get_CRLH_position(PinConfig->GPIO_PinNumber));
 8000412:	7bfc      	ldrb	r4, [r7, #15]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	b29b      	uxth	r3, r3
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff1d 	bl	800025a <Get_CRLH_position>
 8000420:	4603      	mov	r3, r0
 8000422:	fa04 f203 	lsl.w	r2, r4, r3
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	431a      	orrs	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	601a      	str	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bd90      	pop	{r4, r7, pc}

08000438 <MCAL_GPIO_WritePin>:
 * @param [in]	-value : PIN value
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx , uint16_t PinNumber , uint8_t value){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
 8000444:	4613      	mov	r3, r2
 8000446:	707b      	strb	r3, [r7, #1]
	if(value != (uint8_t)GPIO_PIN_RESET){
 8000448:	787b      	ldrb	r3, [r7, #1]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d003      	beq.n	8000456 <MCAL_GPIO_WritePin+0x1e>
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit

			(GPIOx->BSRR) = (uint16_t)PinNumber ;
 800044e:	887a      	ldrh	r2, [r7, #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	611a      	str	r2, [r3, #16]
//			0: No action on the corresponding ODRx bit
//			1: Reset the corresponding ODRx bit
			(GPIOx->BRR) = (uint16_t)PinNumber ;
		}

}
 8000454:	e002      	b.n	800045c <MCAL_GPIO_WritePin+0x24>
			(GPIOx->BRR) = (uint16_t)PinNumber ;
 8000456:	887a      	ldrh	r2, [r7, #2]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	615a      	str	r2, [r3, #20]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
	...

08000468 <delay>:
 */


#include "TIM.h"

void delay(uint16_t ms){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
	TIM1->TIMx_PSC = 0X8C9F;
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <delay+0x58>)
 8000474:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->TIMx_ARR = ms-1;
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <delay+0x58>)
 8000480:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->TIMx_CR1 |=(1<<0);
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <delay+0x58>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <delay+0x58>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6013      	str	r3, [r2, #0]
	while(!(TIM1->TIMx_SR&0x0001));
 800048e:	bf00      	nop
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <delay+0x58>)
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	f003 0301 	and.w	r3, r3, #1
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <delay+0x28>
	TIM1->TIMx_SR|=(1<<0);
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <delay+0x58>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <delay+0x58>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6113      	str	r3, [r2, #16]
	TIM1->TIMx_CR1 &= ~(1<<0);
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <delay+0x58>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <delay+0x58>)
 80004ae:	f023 0301 	bic.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]

}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2500      	movs	r5, #0
 80004c8:	4e0c      	ldr	r6, [pc, #48]	; (80004fc <__libc_init_array+0x38>)
 80004ca:	4c0d      	ldr	r4, [pc, #52]	; (8000500 <__libc_init_array+0x3c>)
 80004cc:	1ba4      	subs	r4, r4, r6
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	42a5      	cmp	r5, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	f000 f81a 	bl	800050c <_init>
 80004d8:	2500      	movs	r5, #0
 80004da:	4e0a      	ldr	r6, [pc, #40]	; (8000504 <__libc_init_array+0x40>)
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <__libc_init_array+0x44>)
 80004de:	1ba4      	subs	r4, r4, r6
 80004e0:	10a4      	asrs	r4, r4, #2
 80004e2:	42a5      	cmp	r5, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004ec:	4798      	blx	r3
 80004ee:	3501      	adds	r5, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004f6:	4798      	blx	r3
 80004f8:	3501      	adds	r5, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000524 	.word	0x08000524
 8000500:	08000524 	.word	0x08000524
 8000504:	08000524 	.word	0x08000524
 8000508:	08000528 	.word	0x08000528

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr
