
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f3  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000577  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	CLEAR_BIT(DDRC,0);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,0);
  72:	85 b3       	in	r24, 0x15	; 21
  74:	81 60       	ori	r24, 0x01	; 1
  76:	85 bb       	out	0x15, r24	; 21
	DDRA = 0b11111111;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	int i = 0 ;
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	
    while (1) 
    {
		if(i <= 7)
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	91 05       	cpc	r25, r1
  84:	ec f7       	brge	.-6      	; 0x80 <main+0x14>
		{
			if(READ_BIT(PINC,0) == 0)
  86:	98 99       	sbic	0x13, 0	; 19
  88:	fb cf       	rjmp	.-10     	; 0x80 <main+0x14>
			{
				SET_BIT(PORTA,i);
  8a:	4b b3       	in	r20, 0x1b	; 27
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x2c>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x28>
  9c:	24 2b       	or	r18, r20
  9e:	2b bb       	out	0x1b, r18	; 27
				i++;	
  a0:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	34 e3       	ldi	r19, 0x34	; 52
  a6:	4c e0       	ldi	r20, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
  b4:	e5 cf       	rjmp	.-54     	; 0x80 <main+0x14>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
