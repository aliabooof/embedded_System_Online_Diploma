
AVR_USART_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000002d2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c73  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080a  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000700  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a3  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000471  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  7a:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_KICK>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_KICK(void)
{
	LCD_CTRL &= ~(1<<E_PIN);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_KICK+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_KICK+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |=(1<<E_PIN);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	88 60       	ori	r24, 0x08	; 8
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_ISBUSY>:
}

void LCD_ISBUSY(void)
{
	DataDir_LCD_PORT = 0x00; //	Input Mode
  9c:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1<<RW_PIN); // Read mode // ON
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_PIN);// Read Mode // OFF
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	DataDir_LCD_PORT = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW_PIN);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
	
}

void LCD_WRITE_COMMAND(unsigned char command)
{
  ba:	cf 93       	push	r28
  bc:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_ISBUSY();
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_ISBUSY>
	LCD_PORT = command;
  c2:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1<<RW_PIN)|(1<<RS_PIN); // Clear
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	LCD_KICK();
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
	LCD_KICK();
	#endif
}
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <LCD_CLEAR_SCREEN>:
	}
}

void LCD_CLEAR_SCREEN(void)
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
  d8:	08 95       	ret

000000da <LCD_INIT>:
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_INIT+0x4>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_INIT+0xa>
  e4:	00 00       	nop
#include "inc/LCD.h"

void LCD_INIT(void)
{
	_delay_ms(20);
	LCD_ISBUSY();
  e6:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_ISBUSY>
	DataDir_LCD_CTRL |= ((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); // Set as output
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	8e 60       	ori	r24, 0x0E	; 14
  ee:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); // Clear
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	81 7f       	andi	r24, 0xF1	; 241
  f4:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF; // Set Port as Output
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	85 ea       	ldi	r24, 0xA5	; 165
  fc:	9e e0       	ldi	r25, 0x0E	; 14
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_INIT+0x24>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_INIT+0x2a>
 104:	00 00       	nop
	_delay_ms(15);
	LCD_CLEAR_SCREEN();
 106:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_CLEAR_SCREEN>
	
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
 10a:	88 e3       	ldi	r24, 0x38	; 56
 10c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); // As datasheet
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 122:	08 95       	ret

00000124 <LCD_WRITE_CHAR>:
	LCD_KICK();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character)
{
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
	LCD_ISBUSY();
 128:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_ISBUSY>
	LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	88 bb       	out	0x18, r24	; 24
	LCD_PORT = (((character) << DATA_SHIFT));
 132:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 134:	88 b3       	in	r24, 0x18	; 24
 136:	82 60       	ori	r24, 0x02	; 2
 138:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
	LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
	LCD_KICK();
	#endif
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <LCD_GOTOXY>:
	LCD_CTRL &= ~(1<<RW_PIN);
}

void LCD_GOTOXY(unsigned char line, unsigned char position)
{
	if (line == 0)
 148:	81 11       	cpse	r24, r1
 14a:	07 c0       	rjmp	.+14     	; 0x15a <LCD_GOTOXY+0x12>
	{
		if (position < 16 && position >= 0)
 14c:	60 31       	cpi	r22, 0x10	; 16
 14e:	68 f4       	brcc	.+26     	; 0x16a <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	86 0f       	add	r24, r22
 154:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 158:	08 95       	ret
		}
	}
	else if (line == 1)
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	31 f4       	brne	.+12     	; 0x16a <LCD_GOTOXY+0x22>
	{
		if (position < 16 && position >= 0)
 15e:	60 31       	cpi	r22, 0x10	; 16
 160:	20 f4       	brcc	.+8      	; 0x16a <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 162:	80 ec       	ldi	r24, 0xC0	; 192
 164:	86 0f       	add	r24, r22
 166:	0e 94 5d 00 	call	0xba	; 0xba <LCD_WRITE_COMMAND>
 16a:	08 95       	ret

0000016c <LCD_WRITE_STRING>:
	LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* string)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	int count = 0; // To count how much char on the line (it should be 16 char only)
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (*string > 0)
 17a:	19 c0       	rjmp	.+50     	; 0x1ae <LCD_WRITE_STRING+0x42>
	{
		count++;
 17c:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	0e 94 92 00 	call	0x124	; 0x124 <LCD_WRITE_CHAR>
		if (count == 16) // Go to the second line
 186:	c0 31       	cpi	r28, 0x10	; 16
 188:	d1 05       	cpc	r29, r1
 18a:	29 f4       	brne	.+10     	; 0x196 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTOXY(1,0); // Line 1 position 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_GOTOXY>
 194:	0c c0       	rjmp	.+24     	; 0x1ae <LCD_WRITE_STRING+0x42>
		}
		else if (count == 32 || count == 33) // Clear screen and show again
 196:	ce 01       	movw	r24, r28
 198:	80 97       	sbiw	r24, 0x20	; 32
 19a:	02 97       	sbiw	r24, 0x02	; 2
 19c:	40 f4       	brcc	.+16     	; 0x1ae <LCD_WRITE_STRING+0x42>
		{
			LCD_CLEAR_SCREEN();
 19e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_CLEAR_SCREEN>
			LCD_GOTOXY(0,0); // Line 0 Position 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_GOTOXY>
			count = 0;
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0

void LCD_WRITE_STRING(char* string)
{
	int count = 0; // To count how much char on the line (it should be 16 char only)
	
	while (*string > 0)
 1ae:	f8 01       	movw	r30, r16
 1b0:	80 81       	ld	r24, Z
 1b2:	81 11       	cpse	r24, r1
 1b4:	e3 cf       	rjmp	.-58     	; 0x17c <LCD_WRITE_STRING+0x10>
			LCD_CLEAR_SCREEN();
			LCD_GOTOXY(0,0); // Line 0 Position 0
			count = 0;
		}
	}
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <main>:
#include "MCAL/AVR_USART_DRIVER.h"
#include "HAL/inc/LCD.h"


int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	c8 5c       	subi	r28, 0xC8	; 200
 1ca:	d1 09       	sbc	r29, r1
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
	
	
	char strr[200];
	LCD_INIT();
 1d6:	0e 94 6d 00 	call	0xda	; 0xda <LCD_INIT>
	LCD_CLEAR_SCREEN();
 1da:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_CLEAR_SCREEN>
 1de:	2f e3       	ldi	r18, 0x3F	; 63
 1e0:	82 e4       	ldi	r24, 0x42	; 66
 1e2:	9f e0       	ldi	r25, 0x0F	; 15
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x24>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x2e>
 1ee:	00 00       	nop
	_delay_ms(5000);
	LCD_WRITE_STRING("HELLO ");
 1f0:	80 e6       	ldi	r24, 0x60	; 96
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WRITE_STRING>
 1f8:	2f e3       	ldi	r18, 0x3F	; 63
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x3e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x48>
 208:	00 00       	nop
	_delay_ms(5000);
	LCD_CLEAR_SCREEN();
 20a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_CLEAR_SCREEN>
	UART_init();
 20e:	0e 94 25 01 	call	0x24a	; 0x24a <UART_init>
	LCD_WRITE_STRING("UART is initialized ");
 212:	87 e6       	ldi	r24, 0x67	; 103
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WRITE_STRING>
 21a:	2f e3       	ldi	r18, 0x3F	; 63
 21c:	82 e4       	ldi	r24, 0x42	; 66
 21e:	9f e0       	ldi	r25, 0x0F	; 15
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x60>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x6a>
 22a:	00 00       	nop
	_delay_ms(5000);
	LCD_CLEAR_SCREEN();
 22c:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_CLEAR_SCREEN>
	UART_SendString("ALI OSAMA ABOOUF");
 230:	8c e7       	ldi	r24, 0x7C	; 124
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 45 01 	call	0x28a	; 0x28a <UART_SendString>
	
	while (1)
	{
		UART_ReceiveString(strr);
 238:	ce 01       	movw	r24, r28
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	0e 94 55 01 	call	0x2aa	; 0x2aa <UART_ReceiveString>
		LCD_WRITE_STRING(strr);
 240:	ce 01       	movw	r24, r28
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WRITE_STRING>
 248:	f7 cf       	rjmp	.-18     	; 0x238 <main+0x78>

0000024a <UART_init>:
	//choose asynch mode (default)
	//CLEAR_BIT(UCSRC,UMSEL);
	
	//we are working with f_osc = 16MHz
	//normal mode (divider = 16)
	CLEAR_BIT(UCSRA,U2X);
 24a:	8b b1       	in	r24, 0x0b	; 11
 24c:	8d 7f       	andi	r24, 0xFD	; 253
 24e:	8b b9       	out	0x0b, r24	; 11
	UBRRL = 103; //from data sheet
 250:	87 e6       	ldi	r24, 0x67	; 103
 252:	89 b9       	out	0x09, r24	; 9
	//stop bit
	#ifdef  one_stop_bit
	CLEAR_BIT(UCSRC,USBS);
	#endif
	#ifdef two_stop_bit
	SET_BIT(UCSRC,USBS);
 254:	80 b5       	in	r24, 0x20	; 32
 256:	88 60       	ori	r24, 0x08	; 8
 258:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
		CLEAR_BIT(UCSRB,UCSZ2);
		break;

		case 8:
		SET_BIT(UCSRC,UCSZ0);
 25a:	80 b5       	in	r24, 0x20	; 32
 25c:	82 60       	ori	r24, 0x02	; 2
 25e:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 260:	80 b5       	in	r24, 0x20	; 32
 262:	84 60       	ori	r24, 0x04	; 4
 264:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	8a b9       	out	0x0a, r24	; 10
		CLEAR_BIT(UCSRB,UCSZ2);
		
	}
	
	//-----------------Enable----------------------
	SET_BIT(UCSRB,TXEN);
 26c:	8a b1       	in	r24, 0x0a	; 10
 26e:	88 60       	ori	r24, 0x08	; 8
 270:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 61       	ori	r24, 0x10	; 16
 276:	8a b9       	out	0x0a, r24	; 10
 278:	08 95       	ret

0000027a <UART_SendChar>:
}

void UART_SendChar(char data){
	
	while(!(READ_BIT(UCSRA,UDRE)));
 27a:	5d 9b       	sbis	0x0b, 5	; 11
 27c:	fe cf       	rjmp	.-4      	; 0x27a <UART_SendChar>
	UDR = data;
 27e:	8c b9       	out	0x0c, r24	; 12
 280:	08 95       	ret

00000282 <UART_ReceiveChar>:
}
char UART_ReceiveChar(){
	while(!(READ_BIT(UCSRA,RXC)));
 282:	5f 9b       	sbis	0x0b, 7	; 11
 284:	fe cf       	rjmp	.-4      	; 0x282 <UART_ReceiveChar>
	return UDR;
 286:	8c b1       	in	r24, 0x0c	; 12
}
 288:	08 95       	ret

0000028a <UART_SendString>:


void UART_SendString(char* str) {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	while (*str != '\0') {
 290:	03 c0       	rjmp	.+6      	; 0x298 <UART_SendString+0xe>
		UART_SendChar(*str);
 292:	0e 94 3d 01 	call	0x27a	; 0x27a <UART_SendChar>
		str++;
 296:	21 96       	adiw	r28, 0x01	; 1
	return UDR;
}


void UART_SendString(char* str) {
	while (*str != '\0') {
 298:	88 81       	ld	r24, Y
 29a:	81 11       	cpse	r24, r1
 29c:	fa cf       	rjmp	.-12     	; 0x292 <UART_SendString+0x8>
		UART_SendChar(*str);
		str++;
	}
	//to indicate end
	UART_SendChar('\r');
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	0e 94 3d 01 	call	0x27a	; 0x27a <UART_SendChar>
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <UART_ReceiveString>:


void UART_ReceiveString(char *Buffer)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	ec 01       	movw	r28, r24
	
	*Buffer = UART_ReceiveChar();
 2b0:	0e 94 41 01 	call	0x282	; 0x282 <UART_ReceiveChar>
 2b4:	88 83       	st	Y, r24
	while (*Buffer != '\r') {
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <UART_ReceiveString+0x16>
		Buffer++;
 2b8:	21 96       	adiw	r28, 0x01	; 1
		*Buffer = UART_ReceiveChar();
 2ba:	0e 94 41 01 	call	0x282	; 0x282 <UART_ReceiveChar>
 2be:	88 83       	st	Y, r24

void UART_ReceiveString(char *Buffer)
{
	
	*Buffer = UART_ReceiveChar();
	while (*Buffer != '\r') {
 2c0:	88 81       	ld	r24, Y
 2c2:	8d 30       	cpi	r24, 0x0D	; 13
 2c4:	c9 f7       	brne	.-14     	; 0x2b8 <UART_ReceiveString+0xe>
		Buffer++;
		*Buffer = UART_ReceiveChar();
	}
	*Buffer = '\0';
 2c6:	18 82       	st	Y, r1
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
