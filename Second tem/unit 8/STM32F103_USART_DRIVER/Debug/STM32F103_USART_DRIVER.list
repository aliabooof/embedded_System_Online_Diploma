
STM32F103_USART_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab0  08000ab0  00010ab8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab0  08000ab0  00010ab8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab0  08000ab8  00010ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab0  08000ab0  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ab4  08000ab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ab8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ab8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ab8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010ae1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001552  00000000  00000000  00010b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b2  00000000  00000000  00012076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000a6c  00000000  00000000  00012728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  00013198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000178  00000000  00000000  00013368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000b97  00000000  00000000  000134e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000286c  00000000  00000000  00014077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a3bb  00000000  00000000  000168e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000594  00000000  00000000  00020ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a80 	.word	0x08000a80

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a80 	.word	0x08000a80

08000170 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <EXTI15_10_IRQHandler+0x18>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <EXTI15_10_IRQHandler+0x18>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6153      	str	r3, [r2, #20]

}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40010400 	.word	0x40010400

080002e8 <Get_CRLH_position>:
 *      Author: aliab
 */

#include "../inc/STM32_F103C6_GPIO_Driver.h"

uint16_t Get_CRLH_position(uint16_t PinNumber){
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80002f2:	88fb      	ldrh	r3, [r7, #6]
 80002f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002f8:	f000 80a5 	beq.w	8000446 <Get_CRLH_position+0x15e>
 80002fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000300:	f300 80a3 	bgt.w	800044a <Get_CRLH_position+0x162>
 8000304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000308:	f000 809b 	beq.w	8000442 <Get_CRLH_position+0x15a>
 800030c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000310:	f300 809b 	bgt.w	800044a <Get_CRLH_position+0x162>
 8000314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000318:	f000 8091 	beq.w	800043e <Get_CRLH_position+0x156>
 800031c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000320:	f300 8093 	bgt.w	800044a <Get_CRLH_position+0x162>
 8000324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000328:	f000 8087 	beq.w	800043a <Get_CRLH_position+0x152>
 800032c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000330:	f300 808b 	bgt.w	800044a <Get_CRLH_position+0x162>
 8000334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000338:	d07d      	beq.n	8000436 <Get_CRLH_position+0x14e>
 800033a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800033e:	f300 8084 	bgt.w	800044a <Get_CRLH_position+0x162>
 8000342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000346:	d074      	beq.n	8000432 <Get_CRLH_position+0x14a>
 8000348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800034c:	dc7d      	bgt.n	800044a <Get_CRLH_position+0x162>
 800034e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000352:	d06c      	beq.n	800042e <Get_CRLH_position+0x146>
 8000354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000358:	dc77      	bgt.n	800044a <Get_CRLH_position+0x162>
 800035a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800035e:	d064      	beq.n	800042a <Get_CRLH_position+0x142>
 8000360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000364:	dc71      	bgt.n	800044a <Get_CRLH_position+0x162>
 8000366:	2b80      	cmp	r3, #128	; 0x80
 8000368:	d05d      	beq.n	8000426 <Get_CRLH_position+0x13e>
 800036a:	2b80      	cmp	r3, #128	; 0x80
 800036c:	dc6d      	bgt.n	800044a <Get_CRLH_position+0x162>
 800036e:	2b20      	cmp	r3, #32
 8000370:	dc48      	bgt.n	8000404 <Get_CRLH_position+0x11c>
 8000372:	2b00      	cmp	r3, #0
 8000374:	dd69      	ble.n	800044a <Get_CRLH_position+0x162>
 8000376:	3b01      	subs	r3, #1
 8000378:	2b1f      	cmp	r3, #31
 800037a:	d866      	bhi.n	800044a <Get_CRLH_position+0x162>
 800037c:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <Get_CRLH_position+0x9c>)
 800037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000382:	bf00      	nop
 8000384:	0800040b 	.word	0x0800040b
 8000388:	0800040f 	.word	0x0800040f
 800038c:	0800044b 	.word	0x0800044b
 8000390:	08000413 	.word	0x08000413
 8000394:	0800044b 	.word	0x0800044b
 8000398:	0800044b 	.word	0x0800044b
 800039c:	0800044b 	.word	0x0800044b
 80003a0:	08000417 	.word	0x08000417
 80003a4:	0800044b 	.word	0x0800044b
 80003a8:	0800044b 	.word	0x0800044b
 80003ac:	0800044b 	.word	0x0800044b
 80003b0:	0800044b 	.word	0x0800044b
 80003b4:	0800044b 	.word	0x0800044b
 80003b8:	0800044b 	.word	0x0800044b
 80003bc:	0800044b 	.word	0x0800044b
 80003c0:	0800041b 	.word	0x0800041b
 80003c4:	0800044b 	.word	0x0800044b
 80003c8:	0800044b 	.word	0x0800044b
 80003cc:	0800044b 	.word	0x0800044b
 80003d0:	0800044b 	.word	0x0800044b
 80003d4:	0800044b 	.word	0x0800044b
 80003d8:	0800044b 	.word	0x0800044b
 80003dc:	0800044b 	.word	0x0800044b
 80003e0:	0800044b 	.word	0x0800044b
 80003e4:	0800044b 	.word	0x0800044b
 80003e8:	0800044b 	.word	0x0800044b
 80003ec:	0800044b 	.word	0x0800044b
 80003f0:	0800044b 	.word	0x0800044b
 80003f4:	0800044b 	.word	0x0800044b
 80003f8:	0800044b 	.word	0x0800044b
 80003fc:	0800044b 	.word	0x0800044b
 8000400:	0800041f 	.word	0x0800041f
 8000404:	2b40      	cmp	r3, #64	; 0x40
 8000406:	d00c      	beq.n	8000422 <Get_CRLH_position+0x13a>
 8000408:	e01f      	b.n	800044a <Get_CRLH_position+0x162>
	//position for pins from 0>>>7 in CRL register
	case GPIO_PIN_0  : return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_1  : return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_2  : return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_3  : return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_4  : return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_5  : return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_6  : return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_7  : return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	//position for pins from 8>>>15 in CRH register
	case GPIO_PIN_8  : return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_9  : return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_10 : return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_11 : return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_12 : return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_13 : return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_14 : return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_15 : return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <Get_CRLH_position+0x164>
	break;
	}
	return 0;
 800044a:	2300      	movs	r3, #0
}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <MCAL_GPIO_Init>:
 * Note			-stm32f103c6 MCU has GPIO A,B,C,D,E modules
 * 				 but LQFPP48 has only GPIO A ,B and part of E,D exported as external pins from THE MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PIN_Config_t * PinConfig){
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	uint8_t pin_config = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t *ConfigRegister = NULL;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
	//pins from 0>>>7 in CRL register and from 8>>>15 in CRH register
	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->CRL) :(&GPIOx->CRH);
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	b29b      	uxth	r3, r3
 8000470:	2bff      	cmp	r3, #255	; 0xff
 8000472:	d801      	bhi.n	8000478 <MCAL_GPIO_Init+0x20>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	e001      	b.n	800047c <MCAL_GPIO_Init+0x24>
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	60bb      	str	r3, [r7, #8]

	//resets pin state before configure it
	* ConfigRegister &= ~ (0XF << (Get_CRLH_position(PinConfig->GPIO_PinNumber)));
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	b29b      	uxth	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff2f 	bl	80002e8 <Get_CRLH_position>
 800048a:	4603      	mov	r3, r0
 800048c:	461a      	mov	r2, r3
 800048e:	230f      	movs	r3, #15
 8000490:	4093      	lsls	r3, r2
 8000492:	43da      	mvns	r2, r3
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	401a      	ands	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	601a      	str	r2, [r3, #0]
	// if the pin is output
	if(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG_AF_OD )
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	789b      	ldrb	r3, [r3, #2]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d00e      	beq.n	80004c6 <MCAL_GPIO_Init+0x6e>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b05      	cmp	r3, #5
 80004b0:	d009      	beq.n	80004c6 <MCAL_GPIO_Init+0x6e>
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b06      	cmp	r3, #6
 80004ba:	d004      	beq.n	80004c6 <MCAL_GPIO_Init+0x6e>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	789b      	ldrb	r3, [r3, #2]
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d110      	bne.n	80004e8 <MCAL_GPIO_Init+0x90>
	{
		//CNFy[1:0] MODEy[1:0] 4bits for pin configuration
		pin_config = ( (((PinConfig->GPIO_PinMode) - 4) <<2) | ((PinConfig->GPIO_OUTPUT_SPEED) & 0x0F));
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	3b04      	subs	r3, #4
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	b25a      	sxtb	r2, r3
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	4313      	orrs	r3, r2
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	73fb      	strb	r3, [r7, #15]
 80004e6:	e030      	b.n	800054a <MCAL_GPIO_Init+0xf2>

	}
	// if the pin is input
	else{ // MODE = 00 :input mode (reset state)

		if(PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG ||PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d004      	beq.n	80004fc <MCAL_GPIO_Init+0xa4>
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	789b      	ldrb	r3, [r3, #2]
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d105      	bne.n	8000508 <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( ((PinConfig->GPIO_PinMode) <<2) | (0x0 & 0x0F));
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	73fb      	strb	r3, [r7, #15]
 8000506:	e020      	b.n	800054a <MCAL_GPIO_Init+0xf2>

		}
		else if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_AF) //works as floating
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b08      	cmp	r3, #8
 8000510:	d102      	bne.n	8000518 <MCAL_GPIO_Init+0xc0>
		{
			pin_config = ( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0 & 0x0F));
 8000512:	2304      	movs	r3, #4
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	e018      	b.n	800054a <MCAL_GPIO_Init+0xf2>

		}
		else
		{
			pin_config = ( ((GPIO_MODE_INPUT_PU) <<2) | (0x0 & 0x0F));
 8000518:	2308      	movs	r3, #8
 800051a:	73fb      	strb	r3, [r7, #15]
			//Table 20. Port bit configuration table
			if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b02      	cmp	r3, #2
 8000524:	d108      	bne.n	8000538 <MCAL_GPIO_Init+0xe0>
			{
				//set PxODR register to 1 if its input  pull up mode
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b29a      	uxth	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	e008      	b.n	800054a <MCAL_GPIO_Init+0xf2>
			}
			else
			{
				//set PxODR register to 0 if its input  pull up mode
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	43da      	mvns	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	401a      	ands	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	60da      	str	r2, [r3, #12]
		}



	}
	* ConfigRegister |= ( (pin_config) << Get_CRLH_position(PinConfig->GPIO_PinNumber));
 800054a:	7bfc      	ldrb	r4, [r7, #15]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	b29b      	uxth	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fec8 	bl	80002e8 <Get_CRLH_position>
 8000558:	4603      	mov	r3, r0
 800055a:	fa04 f203 	lsl.w	r2, r4, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	431a      	orrs	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MCAL_RCC_getSYSCLKFreq>:
1111: SYSCLK divided by 512
*/
const uint8_t AHBPrescTable [16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t MCAL_RCC_getSYSCLKFreq(void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	Set and cleared by hardware to indicate which clock source is used as system clock.
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/
	switch((RCC->CFGR >> 2) & 0b11){
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MCAL_RCC_getSYSCLKFreq+0x34>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	2b02      	cmp	r3, #2
 8000580:	d00a      	beq.n	8000598 <MCAL_RCC_getSYSCLKFreq+0x28>
 8000582:	2b02      	cmp	r3, #2
 8000584:	d80a      	bhi.n	800059c <MCAL_RCC_getSYSCLKFreq+0x2c>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <MCAL_RCC_getSYSCLKFreq+0x20>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d002      	beq.n	8000594 <MCAL_RCC_getSYSCLKFreq+0x24>
 800058e:	e005      	b.n	800059c <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 0:
		return HSI_RC_CLK;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <MCAL_RCC_getSYSCLKFreq+0x38>)
 8000592:	e003      	b.n	800059c <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 1:
		//todo needed to be calculated user should specifiy it
		return HSE_CLK;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MCAL_RCC_getSYSCLKFreq+0x3c>)
 8000596:	e001      	b.n	800059c <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 2:
		////todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <MCAL_RCC_getSYSCLKFreq+0x3c>)
 800059a:	e7ff      	b.n	800059c <MCAL_RCC_getSYSCLKFreq+0x2c>
	}
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000
 80005a8:	007a1200 	.word	0x007a1200
 80005ac:	00f42400 	.word	0x00f42400

080005b0 <MCAL_RCC_getHCLKFreq>:


uint32_t MCAL_RCC_getHCLKFreq(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 80005b4:	f7ff ffdc 	bl	8000570 <MCAL_RCC_getSYSCLKFreq>
 80005b8:	4602      	mov	r2, r0
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <MCAL_RCC_getHCLKFreq+0x20>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	f003 0307 	and.w	r3, r3, #7
 80005c4:	4903      	ldr	r1, [pc, #12]	; (80005d4 <MCAL_RCC_getHCLKFreq+0x24>)
 80005c6:	5ccb      	ldrb	r3, [r1, r3]
 80005c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000
 80005d4:	08000aa0 	.word	0x08000aa0

080005d8 <MCAL_RCC_getPCLK1Freq>:

uint32_t MCAL_RCC_getPCLK1Freq(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 80005dc:	f7ff ffe8 	bl	80005b0 <MCAL_RCC_getHCLKFreq>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <MCAL_RCC_getPCLK1Freq+0x20>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	0a1b      	lsrs	r3, r3, #8
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	4903      	ldr	r1, [pc, #12]	; (80005fc <MCAL_RCC_getPCLK1Freq+0x24>)
 80005ee:	5ccb      	ldrb	r3, [r1, r3]
 80005f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	08000a98 	.word	0x08000a98

08000600 <MCAL_RCC_getPCLK2Freq>:

uint32_t MCAL_RCC_getPCLK2Freq(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000604:	f7ff ffd4 	bl	80005b0 <MCAL_RCC_getHCLKFreq>
 8000608:	4602      	mov	r2, r0
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MCAL_RCC_getPCLK2Freq+0x20>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	0adb      	lsrs	r3, r3, #11
 8000610:	f003 0307 	and.w	r3, r3, #7
 8000614:	4903      	ldr	r1, [pc, #12]	; (8000624 <MCAL_RCC_getPCLK2Freq+0x24>)
 8000616:	5ccb      	ldrb	r3, [r1, r3]
 8000618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800061c:	4618      	mov	r0, r3
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021000 	.word	0x40021000
 8000624:	08000a98 	.word	0x08000a98

08000628 <MCAL_USART_init>:
 * @param [in] 		-config: the configured structure that will be used
 * @retval 			-none
 * Note				-(Supported feature ASYNCH. Only)!
 *============================================================================
 */
void MCAL_USART_init(USART_Typedef * USARTX,USART_config_t * config){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	Global_UART_Config = config;
 8000632:	4a56      	ldr	r2, [pc, #344]	; (800078c <MCAL_USART_init+0x164>)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	6013      	str	r3, [r2, #0]
	uint32_t pclk;

	//	enable Clock for the USART
	if(USART1 == USARTX){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a55      	ldr	r2, [pc, #340]	; (8000790 <MCAL_USART_init+0x168>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <MCAL_USART_init+0x26>
		RCC_USART1_CLK_EN();
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <MCAL_USART_init+0x16c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a53      	ldr	r2, [pc, #332]	; (8000794 <MCAL_USART_init+0x16c>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	e014      	b.n	8000678 <MCAL_USART_init+0x50>
	}else if(USART2 == USARTX){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a51      	ldr	r2, [pc, #324]	; (8000798 <MCAL_USART_init+0x170>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <MCAL_USART_init+0x3c>
		RCC_USART2_CLK_EN();
 8000656:	4b4f      	ldr	r3, [pc, #316]	; (8000794 <MCAL_USART_init+0x16c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a4e      	ldr	r2, [pc, #312]	; (8000794 <MCAL_USART_init+0x16c>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	e009      	b.n	8000678 <MCAL_USART_init+0x50>
	}else if(USART3 == USARTX){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a4d      	ldr	r2, [pc, #308]	; (800079c <MCAL_USART_init+0x174>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d105      	bne.n	8000678 <MCAL_USART_init+0x50>
		RCC_USART3_CLK_EN();
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <MCAL_USART_init+0x16c>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a48      	ldr	r2, [pc, #288]	; (8000794 <MCAL_USART_init+0x16c>)
 8000672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000676:	61d3      	str	r3, [r2, #28]
	}

	//Enable USART Module
	//USART_CR1  Bit 13 UE: USART enable
	USARTX->CR1 |= (1<<13);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60da      	str	r2, [r3, #12]

	//Enable USART TX and RX according to the USART_Mode configuration item
	//USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTX->CR1 |= config->USART_mode;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60da      	str	r2, [r3, #12]

	//Data length
	USARTX->CR1 |= config->data_lenght;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	7a12      	ldrb	r2, [r2, #8]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	60da      	str	r2, [r3, #12]

	//Parity control
	USARTX->CR1 |= config->parity;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	7a52      	ldrb	r2, [r2, #9]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60da      	str	r2, [r3, #12]

	//Stop bits
	USARTX->CR2 |= config->stop_bits;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	7a92      	ldrb	r2, [r2, #10]
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	611a      	str	r2, [r3, #16]

	//Control flow
	USARTX->CR3 |= config->hwFlCt;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	7ad2      	ldrb	r2, [r2, #11]
 80006c4:	431a      	orrs	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	615a      	str	r2, [r3, #20]

	if(USARTX == USART1){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <MCAL_USART_init+0x168>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d103      	bne.n	80006da <MCAL_USART_init+0xb2>
		pclk = MCAL_RCC_getPCLK2Freq();
 80006d2:	f7ff ff95 	bl	8000600 <MCAL_RCC_getPCLK2Freq>
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	e002      	b.n	80006e0 <MCAL_USART_init+0xb8>
	}else{
		pclk = MCAL_RCC_getPCLK1Freq();
 80006da:	f7ff ff7d 	bl	80005d8 <MCAL_RCC_getPCLK1Freq>
 80006de:	60f8      	str	r0, [r7, #12]
	}


	USARTX->BBR = UART_BRR_Register(pclk, config->baud_rate);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ec:	0119      	lsls	r1, r3, #4
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	009a      	lsls	r2, r3, #2
 80006f8:	441a      	add	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	fbb2 f2f3 	udiv	r2, r2, r3
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000710:	2064      	movs	r0, #100	; 0x64
 8000712:	fb00 f303 	mul.w	r3, r0, r3
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <MCAL_USART_init+0x178>)
 800071c:	fba2 2303 	umull	r2, r3, r2, r3
 8000720:	095b      	lsrs	r3, r3, #5
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	ea41 0203 	orr.w	r2, r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	609a      	str	r2, [r3, #8]


	if(config->IRQ_enable != USART_IRQ_ENABLE_NONE){
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	7b1b      	ldrb	r3, [r3, #12]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d026      	beq.n	8000784 <MCAL_USART_init+0x15c>
		USARTX->CR1 |= config->IRQ_enable;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	7b12      	ldrb	r2, [r2, #12]
 800073e:	431a      	orrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60da      	str	r2, [r3, #12]

		if(USART1 == USARTX){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MCAL_USART_init+0x168>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d106      	bne.n	800075a <MCAL_USART_init+0x132>
			NVIC_IRQ37_USART1_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MCAL_USART_init+0x17c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <MCAL_USART_init+0x17c>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6013      	str	r3, [r2, #0]
		}else if(USART3 == USARTX){
			NVIC_IRQ39_USART3_ENABLE();
		}
	}

}
 8000758:	e014      	b.n	8000784 <MCAL_USART_init+0x15c>
		}else if(USART2 == USARTX){
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <MCAL_USART_init+0x170>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d106      	bne.n	8000770 <MCAL_USART_init+0x148>
			NVIC_IRQ38_USART2_ENABLE();
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MCAL_USART_init+0x17c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MCAL_USART_init+0x17c>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	e009      	b.n	8000784 <MCAL_USART_init+0x15c>
		}else if(USART3 == USARTX){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <MCAL_USART_init+0x174>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d105      	bne.n	8000784 <MCAL_USART_init+0x15c>
			NVIC_IRQ39_USART3_ENABLE();
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MCAL_USART_init+0x17c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <MCAL_USART_init+0x17c>)
 800077e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000058 	.word	0x20000058
 8000790:	40013800 	.word	0x40013800
 8000794:	40021000 	.word	0x40021000
 8000798:	40004400 	.word	0x40004400
 800079c:	40004800 	.word	0x40004800
 80007a0:	51eb851f 	.word	0x51eb851f
 80007a4:	e000e104 	.word	0xe000e104

080007a8 <MCAL_USART_set_pins>:
 * @param [in] 		-USARTX: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-(Supported feature ASYNCH. Only)!
 *============================================================================
 */
void MCAL_USART_set_pins(USART_Typedef * USARTX){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	GPIO_PIN_Config_t  pinConfig;

	if(USART1 == USARTX){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a2b      	ldr	r2, [pc, #172]	; (8000860 <MCAL_USART_set_pins+0xb8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d118      	bne.n	80007ea <MCAL_USART_set_pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80007b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007bc:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80007be:	2306      	movs	r3, #6
 80007c0:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007c2:	2301      	movs	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinConfig);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4825      	ldr	r0, [pc, #148]	; (8000864 <MCAL_USART_set_pins+0xbc>)
 80007ce:	f7ff fe43 	bl	8000458 <MCAL_GPIO_Init>

		//PA10 RX
		pinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 80007d8:	2308      	movs	r3, #8
 80007da:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinConfig);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	; (8000864 <MCAL_USART_set_pins+0xbc>)
 80007e4:	f7ff fe38 	bl	8000458 <MCAL_GPIO_Init>


	}


}
 80007e8:	e036      	b.n	8000858 <MCAL_USART_set_pins+0xb0>
	}else if(USART2 == USARTX){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <MCAL_USART_set_pins+0xc0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d116      	bne.n	8000820 <MCAL_USART_set_pins+0x78>
		pinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80007f2:	2304      	movs	r3, #4
 80007f4:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80007f6:	2306      	movs	r3, #6
 80007f8:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinConfig);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <MCAL_USART_set_pins+0xbc>)
 8000806:	f7ff fe27 	bl	8000458 <MCAL_GPIO_Init>
		pinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800080a:	2308      	movs	r3, #8
 800080c:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 800080e:	2308      	movs	r3, #8
 8000810:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinConfig);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <MCAL_USART_set_pins+0xbc>)
 800081a:	f7ff fe1d 	bl	8000458 <MCAL_GPIO_Init>
}
 800081e:	e01b      	b.n	8000858 <MCAL_USART_set_pins+0xb0>
	}else if(USART3 == USARTX){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MCAL_USART_set_pins+0xc4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d117      	bne.n	8000858 <MCAL_USART_set_pins+0xb0>
		pinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 800082e:	2306      	movs	r3, #6
 8000830:	73bb      	strb	r3, [r7, #14]
		pinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinConfig);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MCAL_USART_set_pins+0xc8>)
 800083e:	f7ff fe0b 	bl	8000458 <MCAL_GPIO_Init>
		pinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000846:	81bb      	strh	r3, [r7, #12]
		pinConfig.GPIO_PinMode = GPIO_MODE_INPUT_AF;
 8000848:	2308      	movs	r3, #8
 800084a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinConfig);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <MCAL_USART_set_pins+0xc8>)
 8000854:	f7ff fe00 	bl	8000458 <MCAL_GPIO_Init>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40013800 	.word	0x40013800
 8000864:	40010800 	.word	0x40010800
 8000868:	40004400 	.word	0x40004400
 800086c:	40004800 	.word	0x40004800
 8000870:	40010c00 	.word	0x40010c00

08000874 <MCAL_USART_send_data>:
 * @param [in] 		-poll: enumeration that indicates whether using blocking or not
 * @retval 			-none
 * Note				-Parity if enabled takes space from data
 *============================================================================
 */
void MCAL_USART_send_data(USART_Typedef * USARTX, uint16_t* data, enum polling poll){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	4613      	mov	r3, r2
 8000880:	71fb      	strb	r3, [r7, #7]

	// wait until TXE flag is set in the SR
	if(poll == enable){
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d106      	bne.n	8000896 <MCAL_USART_send_data+0x22>
		while(!(USARTX->SR & (1<<7)));
 8000888:	bf00      	nop
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	2b00      	cmp	r3, #0
 8000894:	d0f9      	beq.n	800088a <MCAL_USART_send_data+0x16>

	//Checking the data length
	if(Global_UART_Config->data_lenght == USART_DATA_LENGHT_9B){
		USARTX->DR = (*data & (uint32_t)(0x1FF));
	}else{
		USARTX->DR = (*data & (uint8_t)(0xFF));
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
	}


}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <MCAL_USART_recive_data>:
 * @param [in] 		-poll: enumeration that indicates whether using blocking or not
 * @retval 			-none
 * Note				-Parity if enabled takes space from data
 *============================================================================
 */
void MCAL_USART_recive_data(USART_Typedef * USARTX, uint16_t* data, enum polling poll){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4613      	mov	r3, r2
 80008b8:	71fb      	strb	r3, [r7, #7]

	//Wait until RXNE flag is set in the SR
	if(poll == enable){
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d106      	bne.n	80008ce <MCAL_USART_recive_data+0x22>
		while(!(USARTX->SR & 1 << 5));
 80008c0:	bf00      	nop
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f9      	beq.n	80008c2 <MCAL_USART_recive_data+0x16>
			*((uint16_t*)data) = (USARTX->DR & (uint8_t)0xFF);
		}

	}else{
		//No parity so all 8 bits are considered data
		if(Global_UART_Config->parity == USART_PARITY_NONE){
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MCAL_USART_recive_data+0x58>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	7a5b      	ldrb	r3, [r3, #9]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d107      	bne.n	80008e8 <MCAL_USART_recive_data+0x3c>
			*((uint16_t*)data) = (USARTX->DR & (uint8_t)0xFF);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	801a      	strh	r2, [r3, #0]
			*((uint16_t*)data) = (USARTX->DR & (uint8_t)0x7F);
		}

	}

}
 80008e6:	e007      	b.n	80008f8 <MCAL_USART_recive_data+0x4c>
			*((uint16_t*)data) = (USARTX->DR & (uint8_t)0x7F);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	801a      	strh	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000058 	.word	0x20000058

08000908 <USART1_IRQHandler>:
	//Waiting until transmission is complete
	while(!(USARTX->SR & 1 << 6));
}

//ISR
void USART1_IRQHandler (void){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <USART1_IRQHandler+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	4798      	blx	r3
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000058 	.word	0x20000058

0800091c <USART2_IRQHandler>:

void USART2_IRQHandler (void){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <USART2_IRQHandler+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	691b      	ldr	r3, [r3, #16]
 8000926:	4798      	blx	r3
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000058 	.word	0x20000058

08000930 <USART3_IRQHandler>:

void USART3_IRQHandler (void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 8000934:	4b02      	ldr	r3, [pc, #8]	; (8000940 <USART3_IRQHandler+0x10>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	4798      	blx	r3
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000058 	.word	0x20000058

08000944 <ALI_UART_IRQ_Callback>:
uint16_t ch;

//APIs
void clock_init(void);

void ALI_UART_IRQ_Callback(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	MCAL_USART_recive_data(USART1, &ch,disable);
 8000948:	2201      	movs	r2, #1
 800094a:	4905      	ldr	r1, [pc, #20]	; (8000960 <ALI_UART_IRQ_Callback+0x1c>)
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <ALI_UART_IRQ_Callback+0x20>)
 800094e:	f7ff ffad 	bl	80008ac <MCAL_USART_recive_data>
	MCAL_USART_send_data(USART1, &ch, enable);
 8000952:	2200      	movs	r2, #0
 8000954:	4902      	ldr	r1, [pc, #8]	; (8000960 <ALI_UART_IRQ_Callback+0x1c>)
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <ALI_UART_IRQ_Callback+0x20>)
 8000958:	f7ff ff8c 	bl	8000874 <MCAL_USART_send_data>
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000005c 	.word	0x2000005c
 8000964:	40013800 	.word	0x40013800

08000968 <main>:

int main(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

	//Initializing Peripherals
	clock_init();
 800096e:	f000 f81f 	bl	80009b0 <clock_init>
	USART_config_t config;

	config.baud_rate = USART_BAUD_RATE_115200;
 8000972:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000976:	60bb      	str	r3, [r7, #8]
	config.hwFlCt = USART_HWFLCT_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	config.IRQ_enable = USART_IRQ_ENABLE_RXNEIE;
 800097c:	2320      	movs	r3, #32
 800097e:	743b      	strb	r3, [r7, #16]
	config.p_IRQ_callback = ALI_UART_IRQ_Callback;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <main+0x40>)
 8000982:	617b      	str	r3, [r7, #20]
	config.parity = USART_PARITY_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	737b      	strb	r3, [r7, #13]
	config.data_lenght = USART_DATA_LENGHT_8B;
 8000988:	2300      	movs	r3, #0
 800098a:	733b      	strb	r3, [r7, #12]
	config.stop_bits = USART_STOP_BITS_1;
 800098c:	2300      	movs	r3, #0
 800098e:	73bb      	strb	r3, [r7, #14]
	config.USART_mode = USART_MODE_TX_RX;
 8000990:	230c      	movs	r3, #12
 8000992:	713b      	strb	r3, [r7, #4]

	MCAL_USART_init(USART1, &config);
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <main+0x44>)
 800099a:	f7ff fe45 	bl	8000628 <MCAL_USART_init>
	MCAL_USART_set_pins(USART1);
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <main+0x44>)
 80009a0:	f7ff ff02 	bl	80007a8 <MCAL_USART_set_pins>

	while(1){
 80009a4:	e7fe      	b.n	80009a4 <main+0x3c>
 80009a6:	bf00      	nop
 80009a8:	08000945 	.word	0x08000945
 80009ac:	40013800 	.word	0x40013800

080009b0 <clock_init>:
		 */
	}
}


void clock_init(void){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <clock_init+0x30>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <clock_init+0x30>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]

	RCC_GPIOB_CLK_EN();
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <clock_init+0x30>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <clock_init+0x30>)
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	6193      	str	r3, [r2, #24]

	RCC_AFIO_CLK_EN();
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <clock_init+0x30>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <clock_init+0x30>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6193      	str	r3, [r2, #24]

}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a12:	f000 f811 	bl	8000a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff ffa7 	bl	8000968 <main>

08000a1a <LoopForever>:

LoopForever:
  b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a28:	08000ab8 	.word	0x08000ab8
  ldr r2, =_sbss
 8000a2c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a30:	20000060 	.word	0x20000060

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <__libc_init_array>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	4d0c      	ldr	r5, [pc, #48]	; (8000a70 <__libc_init_array+0x38>)
 8000a3e:	4c0d      	ldr	r4, [pc, #52]	; (8000a74 <__libc_init_array+0x3c>)
 8000a40:	1b64      	subs	r4, r4, r5
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	42a6      	cmp	r6, r4
 8000a46:	d109      	bne.n	8000a5c <__libc_init_array+0x24>
 8000a48:	f000 f81a 	bl	8000a80 <_init>
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	4d0a      	ldr	r5, [pc, #40]	; (8000a78 <__libc_init_array+0x40>)
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <__libc_init_array+0x44>)
 8000a52:	1b64      	subs	r4, r4, r5
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d105      	bne.n	8000a66 <__libc_init_array+0x2e>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}
 8000a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a60:	4798      	blx	r3
 8000a62:	3601      	adds	r6, #1
 8000a64:	e7ee      	b.n	8000a44 <__libc_init_array+0xc>
 8000a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6a:	4798      	blx	r3
 8000a6c:	3601      	adds	r6, #1
 8000a6e:	e7f2      	b.n	8000a56 <__libc_init_array+0x1e>
 8000a70:	08000ab0 	.word	0x08000ab0
 8000a74:	08000ab0 	.word	0x08000ab0
 8000a78:	08000ab0 	.word	0x08000ab0
 8000a7c:	08000ab4 	.word	0x08000ab4

08000a80 <_init>:
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a82:	bf00      	nop
 8000a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a86:	bc08      	pop	{r3}
 8000a88:	469e      	mov	lr, r3
 8000a8a:	4770      	bx	lr

08000a8c <_fini>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr
