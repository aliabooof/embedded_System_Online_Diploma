
STM32F103_I2C_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001224  08001224  0001122c  2**0
                  CONTENTS
  4 .ARM          00000000  08001224  08001224  0001122c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001224  0800122c  0001122c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001224  08001224  00011224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001228  08001228  00011228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001122c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000000  0800122c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800122c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001122c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011255  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000296f  00000000  00000000  00011298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b94  00000000  00000000  00013c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000131e  00000000  00000000  0001479b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002e8  00000000  00000000  00015ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000260  00000000  00000000  00015da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000323a  00000000  00000000  00016008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000043e5  00000000  00000000  00019242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000cee6  00000000  00000000  0001d627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000009a4  00000000  00000000  0002a510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080011ec 	.word	0x080011ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080011ec 	.word	0x080011ec

08000170 <eeprom_init>:
 *      Author: aliab
 */

#include "../inc/EEPROM.h"

void eeprom_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB6: I2C1_SCL
	//PB7: I2C1_SDA

	I2C_Config_t config;

	config.General_Call_Address_Detection = I2C_ENGC_Enable;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	config.I2C_ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	config.I2C_ClockSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	config.I2C_Mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	config.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	config.StretchMode = I2C_StretchMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fd39 	bl	8000c08 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &config);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fc20 	bl	80009e0 <MCAL_I2C_Init>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_nBytes>:

unsigned char eeprom_write_nBytes(unsigned int memory_adderss,unsigned char * data, uint8_t dataLen){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80001c8:	6019      	str	r1, [r3, #0]
 80001ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001ce:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80001d2:	701a      	strb	r2, [r3, #0]

	//Because of how the EEPROM works we need to put the address in which it reads/write first
	uint8_t buffer[256], i;

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
 80001d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	0a1b      	lsrs	r3, r3, #8
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80001ea:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address
 80001ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80001fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000200:	705a      	strb	r2, [r3, #1]

	for (i = 2; i < (dataLen + 2); ++i) {
 8000202:	2302      	movs	r3, #2
 8000204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000208:	e015      	b.n	8000236 <eeprom_write_nBytes+0x86>
		buffer[i] = data[i - 2];
 800020a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020e:	3b02      	subs	r3, #2
 8000210:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000214:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	441a      	add	r2, r3
 800021c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000220:	7811      	ldrb	r1, [r2, #0]
 8000222:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000226:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800022a:	54d1      	strb	r1, [r2, r3]
	for (i = 2; i < (dataLen + 2); ++i) {
 800022c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000230:	3301      	adds	r3, #1
 8000232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800023a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	1c5a      	adds	r2, r3, #1
 8000242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000246:	429a      	cmp	r2, r3
 8000248:	dadf      	bge.n	800020a <eeprom_write_nBytes+0x5a>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, (dataLen + 2), WithStop, Start);
 800024a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800024e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	3302      	adds	r3, #2
 8000256:	4619      	mov	r1, r3
 8000258:	f107 0214 	add.w	r2, r7, #20
 800025c:	2300      	movs	r3, #0
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2300      	movs	r3, #0
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	460b      	mov	r3, r1
 8000266:	212a      	movs	r1, #42	; 0x2a
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <eeprom_write_nBytes+0xcc>)
 800026a:	f000 fd0b 	bl	8000c84 <MCAL_I2C_Master_TX>

	return 0;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40005400 	.word	0x40005400

08000280 <eeprom_read_nBytes>:

unsigned char eeprom_read_nBytes(unsigned int memory_adderss,uint8_t * data, uint8_t dataLen){
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4613      	mov	r3, r2
 800028c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];

	buffer[0] = (uint8_t)(memory_adderss >> 8); //Upper byte memory address
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	b2db      	uxtb	r3, r3
 8000294:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(memory_adderss); //Lower byte memory address
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_SLAVE_ADDRESS, buffer, 2, WithoutStop, Start); //Write address only
 800029c:	f107 0214 	add.w	r2, r7, #20
 80002a0:	2300      	movs	r3, #0
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2301      	movs	r3, #1
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2302      	movs	r3, #2
 80002aa:	212a      	movs	r1, #42	; 0x2a
 80002ac:	4808      	ldr	r0, [pc, #32]	; (80002d0 <eeprom_read_nBytes+0x50>)
 80002ae:	f000 fce9 	bl	8000c84 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_SLAVE_ADDRESS, data, dataLen, WithStop, RepeatedStart); // Read data
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	2201      	movs	r2, #1
 80002b6:	9201      	str	r2, [sp, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	68ba      	ldr	r2, [r7, #8]
 80002be:	212a      	movs	r1, #42	; 0x2a
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <eeprom_read_nBytes+0x50>)
 80002c2:	f000 fd3d 	bl	8000d40 <MCAL_I2C_Master_RX>

	return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40005400 	.word	0x40005400

080002d4 <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI0_IRQHandler+0x1c>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <EXTI0_IRQHandler+0x20>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4798      	blx	r3

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40010400 	.word	0x40010400
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI1_IRQHandler+0x1c>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI1_IRQHandler+0x20>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4798      	blx	r3

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	2000001c 	.word	0x2000001c

0800031c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI2_IRQHandler+0x1c>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI2_IRQHandler+0x20>)
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	2000001c 	.word	0x2000001c

08000340 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI3_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI3_IRQHandler+0x1c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI3_IRQHandler+0x20>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	2000001c 	.word	0x2000001c

08000364 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI4_IRQHandler+0x1c>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI4_IRQHandler+0x20>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	2000001c 	.word	0x2000001c

08000388 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 800038c:	4b26      	ldr	r3, [pc, #152]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f003 0320 	and.w	r3, r3, #32
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI9_5_IRQHandler+0x22>
 8000398:	4b23      	ldr	r3, [pc, #140]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 800039e:	f043 0320 	orr.w	r3, r3, #32
 80003a2:	6153      	str	r3, [r2, #20]
 80003a4:	4b21      	ldr	r3, [pc, #132]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d008      	beq.n	80003c8 <EXTI9_5_IRQHandler+0x40>
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d008      	beq.n	80003e6 <EXTI9_5_IRQHandler+0x5e>
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a13      	ldr	r2, [pc, #76]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003de:	6153      	str	r3, [r2, #20]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d008      	beq.n	8000404 <EXTI9_5_IRQHandler+0x7c>
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0c      	ldr	r2, [pc, #48]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800040c:	2b00      	cmp	r3, #0
 800040e:	d008      	beq.n	8000422 <EXTI9_5_IRQHandler+0x9a>
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <EXTI9_5_IRQHandler+0xa0>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6153      	str	r3, [r2, #20]
 800041c:	4b03      	ldr	r3, [pc, #12]	; (800042c <EXTI9_5_IRQHandler+0xa4>)
 800041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000420:	4798      	blx	r3

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010400 	.word	0x40010400
 800042c:	2000001c 	.word	0x2000001c

08000430 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <EXTI15_10_IRQHandler+0x18>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <EXTI15_10_IRQHandler+0x18>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6153      	str	r3, [r2, #20]

}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40010400 	.word	0x40010400

0800044c <Get_CRLH_position>:
 *      Author: aliab
 */

#include "../inc/STM32_F103C6_GPIO_Driver.h"

uint16_t Get_CRLH_position(uint16_t PinNumber){
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800045c:	f000 80a5 	beq.w	80005aa <Get_CRLH_position+0x15e>
 8000460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000464:	f300 80a3 	bgt.w	80005ae <Get_CRLH_position+0x162>
 8000468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800046c:	f000 809b 	beq.w	80005a6 <Get_CRLH_position+0x15a>
 8000470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000474:	f300 809b 	bgt.w	80005ae <Get_CRLH_position+0x162>
 8000478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800047c:	f000 8091 	beq.w	80005a2 <Get_CRLH_position+0x156>
 8000480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000484:	f300 8093 	bgt.w	80005ae <Get_CRLH_position+0x162>
 8000488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800048c:	f000 8087 	beq.w	800059e <Get_CRLH_position+0x152>
 8000490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000494:	f300 808b 	bgt.w	80005ae <Get_CRLH_position+0x162>
 8000498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800049c:	d07d      	beq.n	800059a <Get_CRLH_position+0x14e>
 800049e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004a2:	f300 8084 	bgt.w	80005ae <Get_CRLH_position+0x162>
 80004a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004aa:	d074      	beq.n	8000596 <Get_CRLH_position+0x14a>
 80004ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004b0:	dc7d      	bgt.n	80005ae <Get_CRLH_position+0x162>
 80004b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004b6:	d06c      	beq.n	8000592 <Get_CRLH_position+0x146>
 80004b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004bc:	dc77      	bgt.n	80005ae <Get_CRLH_position+0x162>
 80004be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c2:	d064      	beq.n	800058e <Get_CRLH_position+0x142>
 80004c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c8:	dc71      	bgt.n	80005ae <Get_CRLH_position+0x162>
 80004ca:	2b80      	cmp	r3, #128	; 0x80
 80004cc:	d05d      	beq.n	800058a <Get_CRLH_position+0x13e>
 80004ce:	2b80      	cmp	r3, #128	; 0x80
 80004d0:	dc6d      	bgt.n	80005ae <Get_CRLH_position+0x162>
 80004d2:	2b20      	cmp	r3, #32
 80004d4:	dc48      	bgt.n	8000568 <Get_CRLH_position+0x11c>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	dd69      	ble.n	80005ae <Get_CRLH_position+0x162>
 80004da:	3b01      	subs	r3, #1
 80004dc:	2b1f      	cmp	r3, #31
 80004de:	d866      	bhi.n	80005ae <Get_CRLH_position+0x162>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <Get_CRLH_position+0x9c>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	0800056f 	.word	0x0800056f
 80004ec:	08000573 	.word	0x08000573
 80004f0:	080005af 	.word	0x080005af
 80004f4:	08000577 	.word	0x08000577
 80004f8:	080005af 	.word	0x080005af
 80004fc:	080005af 	.word	0x080005af
 8000500:	080005af 	.word	0x080005af
 8000504:	0800057b 	.word	0x0800057b
 8000508:	080005af 	.word	0x080005af
 800050c:	080005af 	.word	0x080005af
 8000510:	080005af 	.word	0x080005af
 8000514:	080005af 	.word	0x080005af
 8000518:	080005af 	.word	0x080005af
 800051c:	080005af 	.word	0x080005af
 8000520:	080005af 	.word	0x080005af
 8000524:	0800057f 	.word	0x0800057f
 8000528:	080005af 	.word	0x080005af
 800052c:	080005af 	.word	0x080005af
 8000530:	080005af 	.word	0x080005af
 8000534:	080005af 	.word	0x080005af
 8000538:	080005af 	.word	0x080005af
 800053c:	080005af 	.word	0x080005af
 8000540:	080005af 	.word	0x080005af
 8000544:	080005af 	.word	0x080005af
 8000548:	080005af 	.word	0x080005af
 800054c:	080005af 	.word	0x080005af
 8000550:	080005af 	.word	0x080005af
 8000554:	080005af 	.word	0x080005af
 8000558:	080005af 	.word	0x080005af
 800055c:	080005af 	.word	0x080005af
 8000560:	080005af 	.word	0x080005af
 8000564:	08000583 	.word	0x08000583
 8000568:	2b40      	cmp	r3, #64	; 0x40
 800056a:	d00c      	beq.n	8000586 <Get_CRLH_position+0x13a>
 800056c:	e01f      	b.n	80005ae <Get_CRLH_position+0x162>
	//position for pins from 0>>>7 in CRL register
	case GPIO_PIN_0  : return 0;
 800056e:	2300      	movs	r3, #0
 8000570:	e01e      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_1  : return 4;
 8000572:	2304      	movs	r3, #4
 8000574:	e01c      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_2  : return 8;
 8000576:	2308      	movs	r3, #8
 8000578:	e01a      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_3  : return 12;
 800057a:	230c      	movs	r3, #12
 800057c:	e018      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_4  : return 16;
 800057e:	2310      	movs	r3, #16
 8000580:	e016      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_5  : return 20;
 8000582:	2314      	movs	r3, #20
 8000584:	e014      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_6  : return 24;
 8000586:	2318      	movs	r3, #24
 8000588:	e012      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_7  : return 28;
 800058a:	231c      	movs	r3, #28
 800058c:	e010      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	//position for pins from 8>>>15 in CRH register
	case GPIO_PIN_8  : return 0;
 800058e:	2300      	movs	r3, #0
 8000590:	e00e      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_9  : return 4;
 8000592:	2304      	movs	r3, #4
 8000594:	e00c      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_10 : return 8;
 8000596:	2308      	movs	r3, #8
 8000598:	e00a      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_11 : return 12;
 800059a:	230c      	movs	r3, #12
 800059c:	e008      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_12 : return 16;
 800059e:	2310      	movs	r3, #16
 80005a0:	e006      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_13 : return 20;
 80005a2:	2314      	movs	r3, #20
 80005a4:	e004      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_14 : return 24;
 80005a6:	2318      	movs	r3, #24
 80005a8:	e002      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_15 : return 28;
 80005aa:	231c      	movs	r3, #28
 80005ac:	e000      	b.n	80005b0 <Get_CRLH_position+0x164>
	break;
	}
	return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MCAL_GPIO_Init>:
 * Note			-stm32f103c6 MCU has GPIO A,B,C,D,E modules
 * 				 but LQFPP48 has only GPIO A ,B and part of E,D exported as external pins from THE MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PIN_Config_t * PinConfig){
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	uint8_t pin_config = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t *ConfigRegister = NULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
	//pins from 0>>>7 in CRL register and from 8>>>15 in CRH register
	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->CRL) :(&GPIOx->CRH);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	2bff      	cmp	r3, #255	; 0xff
 80005d6:	d801      	bhi.n	80005dc <MCAL_GPIO_Init+0x20>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	e001      	b.n	80005e0 <MCAL_GPIO_Init+0x24>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3304      	adds	r3, #4
 80005e0:	60bb      	str	r3, [r7, #8]

	//resets pin state before configure it
	* ConfigRegister &= ~ (0XF << (Get_CRLH_position(PinConfig->GPIO_PinNumber)));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff2f 	bl	800044c <Get_CRLH_position>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	230f      	movs	r3, #15
 80005f4:	4093      	lsls	r3, r2
 80005f6:	43da      	mvns	r2, r3
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	401a      	ands	r2, r3
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	601a      	str	r2, [r3, #0]
	// if the pin is output
	if(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG_AF_OD )
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b04      	cmp	r3, #4
 800060a:	d00e      	beq.n	800062a <MCAL_GPIO_Init+0x6e>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b05      	cmp	r3, #5
 8000614:	d009      	beq.n	800062a <MCAL_GPIO_Init+0x6e>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b06      	cmp	r3, #6
 800061e:	d004      	beq.n	800062a <MCAL_GPIO_Init+0x6e>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b07      	cmp	r3, #7
 8000628:	d110      	bne.n	800064c <MCAL_GPIO_Init+0x90>
	{
		//CNFy[1:0] MODEy[1:0] 4bits for pin configuration
		pin_config = ( (((PinConfig->GPIO_PinMode) - 4) <<2) | ((PinConfig->GPIO_OUTPUT_SPEED) & 0x0F));
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	3b04      	subs	r3, #4
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	b25a      	sxtb	r2, r3
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	78db      	ldrb	r3, [r3, #3]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	b25b      	sxtb	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e030      	b.n	80006ae <MCAL_GPIO_Init+0xf2>

	}
	// if the pin is input
	else{ // MODE = 00 :input mode (reset state)

		if(PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG ||PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d004      	beq.n	8000660 <MCAL_GPIO_Init+0xa4>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( ((PinConfig->GPIO_PinMode) <<2) | (0x0 & 0x0F));
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e020      	b.n	80006ae <MCAL_GPIO_Init+0xf2>

		}
		else if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_AF) //works as floating
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	789b      	ldrb	r3, [r3, #2]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b08      	cmp	r3, #8
 8000674:	d102      	bne.n	800067c <MCAL_GPIO_Init+0xc0>
		{
			pin_config = ( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0 & 0x0F));
 8000676:	2304      	movs	r3, #4
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e018      	b.n	80006ae <MCAL_GPIO_Init+0xf2>

		}
		else
		{
			pin_config = ( ((GPIO_MODE_INPUT_PU) <<2) | (0x0 & 0x0F));
 800067c:	2308      	movs	r3, #8
 800067e:	73fb      	strb	r3, [r7, #15]
			//Table 20. Port bit configuration table
			if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	789b      	ldrb	r3, [r3, #2]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b02      	cmp	r3, #2
 8000688:	d108      	bne.n	800069c <MCAL_GPIO_Init+0xe0>
			{
				//set PxODR register to 1 if its input  pull up mode
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	e008      	b.n	80006ae <MCAL_GPIO_Init+0xf2>
			}
			else
			{
				//set PxODR register to 0 if its input  pull up mode
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	401a      	ands	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60da      	str	r2, [r3, #12]
		}



	}
	* ConfigRegister |= ( (pin_config) << Get_CRLH_position(PinConfig->GPIO_PinNumber));
 80006ae:	7bfc      	ldrb	r4, [r7, #15]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fec8 	bl	800044c <Get_CRLH_position>
 80006bc:	4603      	mov	r3, r0
 80006be:	fa04 f203 	lsl.w	r2, r4, r3
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	431a      	orrs	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd90      	pop	{r4, r7, pc}

080006d4 <I2C_GetFlagSTATUS>:
//================================================================
//				Generic Functions
//================================================================

FlagSTATUS I2C_GetFlagSTATUS(I2C_Typedef *I2Cx, Status Flag)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	uint32_t flag1 = 0 ,flag2 = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
	FlagSTATUS bitstatus = RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	77fb      	strb	r3, [r7, #31]

	switch(Flag)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2b06      	cmp	r3, #6
 80006f2:	d813      	bhi.n	800071c <I2C_GetFlagSTATUS+0x48>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d87e      	bhi.n	80007f8 <I2C_GetFlagSTATUS+0x124>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <I2C_GetFlagSTATUS+0x2c>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000727 	.word	0x08000727
 8000704:	0800073f 	.word	0x0800073f
 8000708:	08000757 	.word	0x08000757
 800070c:	080007e1 	.word	0x080007e1
 8000710:	080007a5 	.word	0x080007a5
 8000714:	080007a5 	.word	0x080007a5
 8000718:	080007bd 	.word	0x080007bd
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <I2C_GetFlagSTATUS+0x130>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d024      	beq.n	800076e <I2C_GetFlagSTATUS+0x9a>
 8000724:	e068      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <I2C_GetFlagSTATUS+0x64>
			bitstatus = SET ;
 8000732:	2301      	movs	r3, #1
 8000734:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000736:	e05f      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	77fb      	strb	r3, [r7, #31]
		break;
 800073c:	e05c      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1) & (I2C_SR1_SB))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <I2C_GetFlagSTATUS+0x7c>
			bitstatus = SET ;
 800074a:	2301      	movs	r3, #1
 800074c:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 800074e:	e053      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	77fb      	strb	r3, [r7, #31]
		break;
 8000754:	e050      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
		//		This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
		//		when PE=0.
		//		Address matched (Slave)
		//		0: Address mismatched or not received.
		//		1: Received address matched
		if( (I2Cx->SR1) & (I2C_SR1_ADDR))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <I2C_GetFlagSTATUS+0x94>
			bitstatus = SET ;
 8000762:	2301      	movs	r3, #1
 8000764:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8000766:	e047      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	77fb      	strb	r3, [r7, #31]
		break;
 800076c:	e044      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		// Read I2C Status Register
		flag1 = I2Cx->SR1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	041b      	lsls	r3, r3, #16
 800077e:	617b      	str	r3, [r7, #20]
		// Get the last event value from I2C Status Register
		lastevent = ((flag2 | flag1) & (uint32_t)0x00FFFFFF);
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	4313      	orrs	r3, r2
 8000786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800078a:	613b      	str	r3, [r7, #16]
		//Check whether the last event contains the I2C_EVENT
		if( (lastevent & MASTER_BYTE_TRANSMITTING) == MASTER_BYTE_TRANSMITTING)
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <I2C_GetFlagSTATUS+0x130>)
 8000790:	4013      	ands	r3, r2
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <I2C_GetFlagSTATUS+0x130>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d102      	bne.n	800079e <I2C_GetFlagSTATUS+0xca>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET ;
 8000798:	2301      	movs	r3, #1
 800079a:	77fb      	strb	r3, [r7, #31]
		else
		{
			/* ERROR: last event is different from I2C_EVENT */
			bitstatus = RESET;
		}
		break;
 800079c:	e02c      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	77fb      	strb	r3, [r7, #31]
		break;
 80007a2:	e029      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
	case EV8://EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
	{
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(I2Cx->SR1 & (I2C_SR1_TXE))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <I2C_GetFlagSTATUS+0xe2>
		{
			bitstatus = SET ;
 80007b0:	2301      	movs	r3, #1
 80007b2:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 80007b4:	e020      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	77fb      	strb	r3, [r7, #31]
		break;
 80007ba:	e01d      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
		//		1: Data register empty
		//----------------------------------------------
		//		Bit 2 BTF: Byte transfer finished
		//		0: Data byte transfer not done
		//		1: Data byte transfer succeeded
		if( (I2Cx->SR1 & (I2C_SR1_TXE))  &&  (I2Cx->SR1 & (I2C_SR1_BTF)))
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d008      	beq.n	80007da <I2C_GetFlagSTATUS+0x106>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <I2C_GetFlagSTATUS+0x106>
		{
			bitstatus = SET ;
 80007d4:	2301      	movs	r3, #1
 80007d6:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 80007d8:	e00e      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	77fb      	strb	r3, [r7, #31]
		break;
 80007de:	e00b      	b.n	80007f8 <I2C_GetFlagSTATUS+0x124>
	case EV7://EV5: RxNE = 1 Cleared by Reading DR Register
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if(I2Cx->SR1 & (I2C_SR1_RXNE))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <I2C_GetFlagSTATUS+0x11e>
		{
			bitstatus = SET ;
 80007ec:	2301      	movs	r3, #1
 80007ee:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 80007f0:	e001      	b.n	80007f6 <I2C_GetFlagSTATUS+0x122>
			bitstatus = RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	77fb      	strb	r3, [r7, #31]
		break;
 80007f6:	bf00      	nop
	}
	}
	return bitstatus;
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	00070080 	.word	0x00070080

08000808 <I2C_AcknowledgeConfig>:

//supported only 7 bit mode
void I2C_AcknowledgeConfig(I2C_Typedef *I2Cx, Fuctional_State NewState)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d106      	bne.n	8000828 <I2C_AcknowledgeConfig+0x20>
	{
		/* Enable the Acknowledgment */
		I2Cx->CR1 |= I2C_CR1_ACK;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
	else
	{
		/* Disable the Acknowledgment */
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000826:	e005      	b.n	8000834 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <I2C_GenerateSTART>:

void I2C_GenerateSTART(I2C_Typedef *I2Cx, Fuctional_State NewState, Repeated_Start Start)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	70fb      	strb	r3, [r7, #3]
 800084a:	4613      	mov	r3, r2
 800084c:	70bb      	strb	r3, [r7, #2]
	if(Start != RepeatedStart)
 800084e:	78bb      	ldrb	r3, [r7, #2]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d007      	beq.n	8000864 <I2C_GenerateSTART+0x26>
	{
		//Check if bus is idle
		while(I2C_GetFlagSTATUS(I2Cx, I2C_BUS_BUSY));
 8000854:	bf00      	nop
 8000856:	2100      	movs	r1, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff3b 	bl	80006d4 <I2C_GetFlagSTATUS>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f8      	bne.n	8000856 <I2C_GenerateSTART+0x18>
	//	0: No Start generation
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free
	if(NewState == ENABLE)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d106      	bne.n	8000878 <I2C_GenerateSTART+0x3a>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_START;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8000876:	e005      	b.n	8000884 <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_Typedef *I2Cx, Fuctional_State NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d106      	bne.n	80008ac <I2C_GenerateSTOP+0x20>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_STOP;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 80008aa:	e005      	b.n	80008b8 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <I2C_SendAddress>:

void I2C_SendAddress(I2C_Typedef *I2Cx, uint16_t Address, I2C_Direction Direction)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	807b      	strh	r3, [r7, #2]
 80008ce:	4613      	mov	r3, r2
 80008d0:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 80008d2:	887b      	ldrh	r3, [r7, #2]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	807b      	strh	r3, [r7, #2]

	if(Direction == I2C_Direction_Transmitter)
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d104      	bne.n	80008e8 <I2C_SendAddress+0x26>
	{
		/*Reset the address bit0 for write*/
		Address &= ~(1<<0);
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	807b      	strh	r3, [r7, #2]
 80008e6:	e003      	b.n	80008f0 <I2C_SendAddress+0x2e>
	}
	else  //I2C_Direction_Receiver
	{
		/*Set the address bit0 for Read*/
		Address |= (1<<0);
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	807b      	strh	r3, [r7, #2]
	}
	/*Send The Address*/
	I2Cx->DR = Address ;
 80008f0:	887a      	ldrh	r2, [r7, #2]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	611a      	str	r2, [r3, #16]
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Slave_States>:

void Slave_States(I2C_Typedef *I2Cx,Slave_State State)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a32      	ldr	r2, [pc, #200]	; (80009d8 <Slave_States+0xd8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	73fb      	strb	r3, [r7, #15]

	switch(State)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d856      	bhi.n	80009d0 <Slave_States+0xd0>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <Slave_States+0x28>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000943 	.word	0x08000943
 800092c:	0800093d 	.word	0x0800093d
 8000930:	08000967 	.word	0x08000967
 8000934:	0800097f 	.word	0x0800097f
 8000938:	080009a3 	.word	0x080009a3
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000940:	e046      	b.n	80009d0 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	2b00      	cmp	r3, #0
 800094c:	d03b      	beq.n	80009c6 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			G_I2C_PinConfig[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 800094e:	7bfa      	ldrb	r2, [r7, #15]
 8000950:	4922      	ldr	r1, [pc, #136]	; (80009dc <Slave_States+0xdc>)
 8000952:	4613      	mov	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4413      	add	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	440b      	add	r3, r1
 800095c:	3320      	adds	r3, #32
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2000      	movs	r0, #0
 8000962:	4798      	blx	r3
		}
		break;
 8000964:	e02f      	b.n	80009c6 <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		G_I2C_PinConfig[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000966:	7bfa      	ldrb	r2, [r7, #15]
 8000968:	491c      	ldr	r1, [pc, #112]	; (80009dc <Slave_States+0xdc>)
 800096a:	4613      	mov	r3, r2
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	3320      	adds	r3, #32
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2002      	movs	r0, #2
 800097a:	4798      	blx	r3
		break;
 800097c:	e028      	b.n	80009d0 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	2b00      	cmp	r3, #0
 8000988:	d01f      	beq.n	80009ca <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			G_I2C_PinConfig[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 800098a:	7bfa      	ldrb	r2, [r7, #15]
 800098c:	4913      	ldr	r1, [pc, #76]	; (80009dc <Slave_States+0xdc>)
 800098e:	4613      	mov	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	3320      	adds	r3, #32
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2003      	movs	r0, #3
 800099e:	4798      	blx	r3
		}

		break;
 80009a0:	e013      	b.n	80009ca <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10f      	bne.n	80009ce <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			G_I2C_PinConfig[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	490a      	ldr	r1, [pc, #40]	; (80009dc <Slave_States+0xdc>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	4413      	add	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	440b      	add	r3, r1
 80009bc:	3320      	adds	r3, #32
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2004      	movs	r0, #4
 80009c2:	4798      	blx	r3
		}

		break;
 80009c4:	e003      	b.n	80009ce <Slave_States+0xce>
		break;
 80009c6:	bf00      	nop
 80009c8:	e002      	b.n	80009d0 <Slave_States+0xd0>
		break;
 80009ca:	bf00      	nop
 80009cc:	e000      	b.n	80009d0 <Slave_States+0xd0>
		break;
 80009ce:	bf00      	nop
	}
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40005400 	.word	0x40005400
 80009dc:	20000058 	.word	0x20000058

080009e0 <MCAL_I2C_Init>:
 * @retval 			- None
 * Note 			- Supported for I2C SM mode only
 * 					- Support only 7-bit address mode
 */
void MCAL_I2C_Init(I2C_Typedef *I2Cx , I2C_Config_t *PinConfig)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg=0 , freqrange=0 , result=0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	82fb      	strh	r3, [r7, #22]
 80009ee:	2300      	movs	r3, #0
 80009f0:	82bb      	strh	r3, [r7, #20]
 80009f2:	2300      	movs	r3, #0
 80009f4:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 8000000;
 80009f6:	4b7b      	ldr	r3, [pc, #492]	; (8000be4 <MCAL_I2C_Init+0x204>)
 80009f8:	60fb      	str	r3, [r7, #12]
	//Enable RCC Clock
	if(I2Cx == I2C1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a7a      	ldr	r2, [pc, #488]	; (8000be8 <MCAL_I2C_Init+0x208>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d110      	bne.n	8000a24 <MCAL_I2C_Init+0x44>
	{
		G_I2C_PinConfig[I2C1_INDEX] = *PinConfig;
 8000a02:	4a7a      	ldr	r2, [pc, #488]	; (8000bec <MCAL_I2C_Init+0x20c>)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	4614      	mov	r4, r2
 8000a08:	461d      	mov	r5, r3
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	682b      	ldr	r3, [r5, #0]
 8000a14:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 8000a16:	4b76      	ldr	r3, [pc, #472]	; (8000bf0 <MCAL_I2C_Init+0x210>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a75      	ldr	r2, [pc, #468]	; (8000bf0 <MCAL_I2C_Init+0x210>)
 8000a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	e014      	b.n	8000a4e <MCAL_I2C_Init+0x6e>
	}
	else if(I2Cx == I2C2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a73      	ldr	r2, [pc, #460]	; (8000bf4 <MCAL_I2C_Init+0x214>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d110      	bne.n	8000a4e <MCAL_I2C_Init+0x6e>
	{
		G_I2C_PinConfig[I2C2_INDEX] =  *PinConfig;
 8000a2c:	4b6f      	ldr	r3, [pc, #444]	; (8000bec <MCAL_I2C_Init+0x20c>)
 8000a2e:	683a      	ldr	r2, [r7, #0]
 8000a30:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000a34:	4615      	mov	r5, r2
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	682b      	ldr	r3, [r5, #0]
 8000a40:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000a42:	4b6b      	ldr	r3, [pc, #428]	; (8000bf0 <MCAL_I2C_Init+0x210>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a6a      	ldr	r2, [pc, #424]	; (8000bf0 <MCAL_I2C_Init+0x210>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4c:	61d3      	str	r3, [r2, #28]
	}

	if(PinConfig->I2C_Mode == I2C_Mode_I2C)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d17f      	bne.n	8000b56 <MCAL_I2C_Init+0x176>
	{
		/*----------------- INIT Timing --------------------*/

		//--I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		//get I2C_CR2 Register value
		tmpreg = I2Cx->CR2;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	82fb      	strh	r3, [r7, #22]
		// clear Frequency FREQ[5:0] bits
		tmpreg &= ~(I2C_CR2_FREQ_Msk);
 8000a5c:	8afb      	ldrh	r3, [r7, #22]
 8000a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a62:	82fb      	strh	r3, [r7, #22]
		//get pclk1 frequency value
		pclk1 = MCAL_RCC_getPCLK1Freq();
 8000a64:	f000 fa9c 	bl	8000fa0 <MCAL_RCC_getPCLK1Freq>
 8000a68:	60f8      	str	r0, [r7, #12]
		//set frequency bits depending on pclk1 value
		freqrange = (uint16_t)(pclk1/1000000);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4a62      	ldr	r2, [pc, #392]	; (8000bf8 <MCAL_I2C_Init+0x218>)
 8000a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	82bb      	strh	r3, [r7, #20]

		tmpreg |= freqrange ;
 8000a76:	8afa      	ldrh	r2, [r7, #22]
 8000a78:	8abb      	ldrh	r3, [r7, #20]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	82fb      	strh	r3, [r7, #22]
		//Write to I2Cx->CR2
		I2Cx->CR2 = tmpreg;
 8000a7e:	8afa      	ldrh	r2, [r7, #22]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers I2Cx->CCR

		// Disable the selected I2C peripheral to configure Time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f023 0201 	bic.w	r2, r3, #1
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	601a      	str	r2, [r3, #0]

		tmpreg =0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	82fb      	strh	r3, [r7, #22]
		if( (PinConfig->I2C_ClockSpeed == I2C_SCLK_SM_50K) || (PinConfig->I2C_ClockSpeed == I2C_SCLK_SM_100K) )
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d004      	beq.n	8000aaa <MCAL_I2C_Init+0xca>
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a55      	ldr	r2, [pc, #340]	; (8000bfc <MCAL_I2C_Init+0x21c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d112      	bne.n	8000ad0 <MCAL_I2C_Init+0xf0>
			//Standard Mode Speed Calculation
			// Thigh = CCR * TPCLK1
			// Thigh = Tclk /2
			// CCR = Tclk / (2 * TPCLK1)
			// CCR = Fpclk1 / (2 * I2C_Clock_Frequency)
			result = (pclk1 / (PinConfig->I2C_ClockSpeed << 1) );
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	827b      	strh	r3, [r7, #18]

			tmpreg |= result;
 8000ab8:	8afa      	ldrh	r2, [r7, #22]
 8000aba:	8a7b      	ldrh	r3, [r7, #18]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	82fb      	strh	r3, [r7, #22]

			//Write to I2Cx->CCR
			I2Cx->CCR = tmpreg;
 8000ac0:	8afa      	ldrh	r2, [r7, #22]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	61da      	str	r2, [r3, #28]
			/*--------------I2C_TRISE Configuration--------------*/
			//For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//therefore the TRISE[5:0] bits must be programmed with 09h
			//(1000 ns / 125 ns = 8 + 1)
			I2Cx->TRISE = freqrange + 1 ;
 8000ac6:	8abb      	ldrh	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	461a      	mov	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode is Not Supported
		}

		//Get I2Cx->CR1 value
		tmpreg = I2Cx->CR1 ;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	82fb      	strh	r3, [r7, #22]

		tmpreg |= (uint16_t)(PinConfig->I2C_ACK_Control | PinConfig->StretchMode | PinConfig->General_Call_Address_Detection | PinConfig->I2C_Mode);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	8afb      	ldrh	r3, [r7, #22]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	82fb      	strh	r3, [r7, #22]

		//Write to I2Cx->CR2
		I2Cx->CR1 = tmpreg ;
 8000b00:	8afa      	ldrh	r2, [r7, #22]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]

		/*--------------I2C_OAR1 & I2C_OAR2 Configuration--------------*/
		tmpreg = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	82fb      	strh	r3, [r7, #22]
		if(PinConfig->I2C_Slave_Address.Enable_Dual_ADD == 1)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	899b      	ldrh	r3, [r3, #12]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10d      	bne.n	8000b2e <MCAL_I2C_Init+0x14e>
		{
			tmpreg = I2C_OAR2_ENDUAL ;
 8000b12:	2301      	movs	r3, #1
 8000b14:	82fb      	strh	r3, [r7, #22]
			tmpreg |= PinConfig->I2C_Slave_Address.secondary_slave_address << I2C_OAR2_ADD2_Pos;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	8a1b      	ldrh	r3, [r3, #16]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tmpreg ;
 8000b28:	8afa      	ldrh	r2, [r7, #22]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60da      	str	r2, [r3, #12]
		}
		tmpreg = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	82fb      	strh	r3, [r7, #22]
		tmpreg |= PinConfig->I2C_Slave_Address.primary_slave_address << 1;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	89db      	ldrh	r3, [r3, #14]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	82fb      	strh	r3, [r7, #22]
		tmpreg |= PinConfig->I2C_Slave_Address.I2C_Addressing_Slave_Mode ;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	8afb      	ldrh	r3, [r7, #22]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tmpreg ;
 8000b50:	8afa      	ldrh	r2, [r7, #22]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
	{
		//SMBUS is Not Supported
	}

	// Interrupt Mode (Slave Mode) //check callback pointer != NULL
	if( PinConfig->P_Slave_Event_CallBack != NULL) // that enable IRQ States Mode
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d038      	beq.n	8000bd0 <MCAL_I2C_Init+0x1f0>
	{
		//Enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <MCAL_I2C_Init+0x208>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d10c      	bne.n	8000ba4 <MCAL_I2C_Init+0x1c4>
		{
			NVIC_IRQ31_I2C1_EV_ENABLE();
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MCAL_I2C_Init+0x220>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MCAL_I2C_Init+0x220>)
 8000b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b94:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_ENABLE();
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e00f      	b.n	8000bc4 <MCAL_I2C_Init+0x1e4>
		}
		else if(I2Cx == I2C2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <MCAL_I2C_Init+0x214>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d10b      	bne.n	8000bc4 <MCAL_I2C_Init+0x1e4>
		{
			NVIC_IRQ33_I2C2_EV_ENABLE();
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ33_I2C2_EV_ENABLE();
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <MCAL_I2C_Init+0x224>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
	}
	// Enable The selecte I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE ;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	601a      	str	r2, [r3, #0]

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}
 8000be4:	007a1200 	.word	0x007a1200
 8000be8:	40005400 	.word	0x40005400
 8000bec:	20000058 	.word	0x20000058
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40005800 	.word	0x40005800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	000186a0 	.word	0x000186a0
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000e104 	.word	0xe000e104

08000c08 <MCAL_I2C_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_Typedef *I2Cx)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	GPIO_PIN_Config_t Pincfg;

		Pincfg.GPIO_PinMode = GPIO_MODE_ANALOG_AF_OD;
 8000c10:	2307      	movs	r3, #7
 8000c12:	73bb      	strb	r3, [r7, #14]
		Pincfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]

		if(I2Cx == I2C1){
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MCAL_I2C_GPIO_Set_Pins+0x70>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d110      	bne.n	8000c42 <MCAL_I2C_GPIO_Set_Pins+0x3a>
			//I2C1_SCL PB6
			Pincfg.GPIO_PinNumber = GPIO_PIN_6;
 8000c20:	2340      	movs	r3, #64	; 0x40
 8000c22:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MCAL_I2C_GPIO_Set_Pins+0x74>)
 8000c2c:	f7ff fcc6 	bl	80005bc <MCAL_GPIO_Init>

			//I2C1_SDA PB7
			Pincfg.GPIO_PinNumber = GPIO_PIN_7;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <MCAL_I2C_GPIO_Set_Pins+0x74>)
 8000c3c:	f7ff fcbe 	bl	80005bc <MCAL_GPIO_Init>

			//I2C2_SDA PB11
			Pincfg.GPIO_PinNumber = GPIO_PIN_11;
			MCAL_GPIO_Init(GPIOB,&Pincfg);
		}
}
 8000c40:	e015      	b.n	8000c6e <MCAL_I2C_GPIO_Set_Pins+0x66>
		}else if(I2Cx == I2C2){
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <MCAL_I2C_GPIO_Set_Pins+0x78>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d111      	bne.n	8000c6e <MCAL_I2C_GPIO_Set_Pins+0x66>
			Pincfg.GPIO_PinNumber = GPIO_PIN_10;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4e:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <MCAL_I2C_GPIO_Set_Pins+0x74>)
 8000c58:	f7ff fcb0 	bl	80005bc <MCAL_GPIO_Init>
			Pincfg.GPIO_PinNumber = GPIO_PIN_11;
 8000c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c60:	81bb      	strh	r3, [r7, #12]
			MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MCAL_I2C_GPIO_Set_Pins+0x74>)
 8000c6a:	f7ff fca7 	bl	80005bc <MCAL_GPIO_Init>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	40005800 	.word	0x40005800

08000c84 <MCAL_I2C_Master_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_TX(I2C_Typedef *I2Cx, uint16_t DevAddr ,uint8_t* pTxBuffer , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	460b      	mov	r3, r1
 8000c92:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
	//todo: support timeout(configure timer working for specific duration rise interrupt
	//timer_interrupt(){ flag = 1 }
	//so any code exist in while(check flag || any polling conditions)

	//1. Set The START bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, Start);
 8000c98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f7ff fdcc 	bl	800083e <I2C_GenerateSTART>

	//2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagSTATUS(I2Cx, EV5));
 8000ca6:	bf00      	nop
 8000ca8:	2101      	movs	r1, #1
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fd12 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f8      	beq.n	8000ca8 <MCAL_I2C_Master_TX+0x24>

	//3. Send Address
	I2C_SendAddress(I2Cx, DevAddr, I2C_Direction_Transmitter);
 8000cb6:	897b      	ldrh	r3, [r7, #10]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fe00 	bl	80008c2 <I2C_SendAddress>

	//4. Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagSTATUS(I2Cx, EV6));
 8000cc2:	bf00      	nop
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fd04 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f8      	beq.n	8000cc4 <MCAL_I2C_Master_TX+0x40>

	//5. /* TRA(Transmit/Receive) ,BUSY ,MSL(Master/Receive) , TXE Flags(Transmit is empty) */
	while(!I2C_GetFlagSTATUS(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000cd2:	bf00      	nop
 8000cd4:	4919      	ldr	r1, [pc, #100]	; (8000d3c <MCAL_I2C_Master_TX+0xb8>)
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fcfc 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f8      	beq.n	8000cd4 <MCAL_I2C_Master_TX+0x50>

	for(i=0;i<datalen;i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	e011      	b.n	8000d0c <MCAL_I2C_Master_TX+0x88>
	{
		/* Write on the Data Register the data to be sent */
		I2Cx->DR = pTxBuffer[i];
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
		//6. Wait for EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_GetFlagSTATUS(I2Cx, EV8));
 8000cf6:	bf00      	nop
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fcea 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f8      	beq.n	8000cf8 <MCAL_I2C_Master_TX+0x74>
	for(i=0;i<datalen;i++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8e9      	bhi.n	8000ce8 <MCAL_I2C_Master_TX+0x64>
	}

	//7. Wait for EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while(!I2C_GetFlagSTATUS(I2Cx, EV8_2));
 8000d14:	bf00      	nop
 8000d16:	2106      	movs	r1, #6
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff fcdb 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <MCAL_I2C_Master_TX+0x92>

	if(Stop == WithStop)
 8000d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d103      	bne.n	8000d34 <MCAL_I2C_Master_TX+0xb0>
	{
		//8. Send Stop Condition
		I2C_GenerateSTOP(I2Cx,ENABLE);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fdac 	bl	800088c <I2C_GenerateSTOP>
	}

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	00070080 	.word	0x00070080

08000d40 <MCAL_I2C_Master_RX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_RX(I2C_Typedef *I2Cx, uint16_t DevAddr ,uint8_t* pRxBuffer , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4a34      	ldr	r2, [pc, #208]	; (8000e28 <MCAL_I2C_Master_RX+0xe8>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	bf14      	ite	ne
 8000d5c:	2301      	movne	r3, #1
 8000d5e:	2300      	moveq	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	74fb      	strb	r3, [r7, #19]

	//1. Set The START bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, Start);
 8000d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fd66 	bl	800083e <I2C_GenerateSTART>

	//2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagSTATUS(I2Cx, EV5));
 8000d72:	bf00      	nop
 8000d74:	2101      	movs	r1, #1
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff fcac 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f8      	beq.n	8000d74 <MCAL_I2C_Master_RX+0x34>

	//3. Send Address
	I2C_SendAddress(I2Cx, DevAddr, I2C_Direction_Receiver);
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff fd9a 	bl	80008c2 <I2C_SendAddress>

	//4. Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagSTATUS(I2Cx, EV6));
 8000d8e:	bf00      	nop
 8000d90:	2102      	movs	r1, #2
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f7ff fc9e 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f8      	beq.n	8000d90 <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx , ENABLE);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f7ff fd31 	bl	8000808 <I2C_AcknowledgeConfig>

	if(datalen)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d01c      	beq.n	8000de6 <MCAL_I2C_Master_RX+0xa6>
	{
		//Read Until Data Length become Zero
		for(i = datalen ; i > 1 ; i--)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e012      	b.n	8000dd8 <MCAL_I2C_Master_RX+0x98>
		{
			//5. Wait Until RxNE become 1
			//EV5: RxNE = 1 Cleared by Reading DR Register
			while(!I2C_GetFlagSTATUS(I2Cx, EV7));
 8000db2:	bf00      	nop
 8000db4:	2103      	movs	r1, #3
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff fc8c 	bl	80006d4 <I2C_GetFlagSTATUS>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f8      	beq.n	8000db4 <MCAL_I2C_Master_RX+0x74>
			//read the data from data register
			*pRxBuffer = I2Cx->DR ;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			pRxBuffer++;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
		for(i = datalen ; i > 1 ; i--)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	dce9      	bgt.n	8000db2 <MCAL_I2C_Master_RX+0x72>
		}
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
 8000dde:	2100      	movs	r1, #0
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fd11 	bl	8000808 <I2C_AcknowledgeConfig>
	}

	if(Stop == WithStop)
 8000de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d103      	bne.n	8000df6 <MCAL_I2C_Master_RX+0xb6>
	{
		//6. Send Stop Condition
		I2C_GenerateSTOP(I2Cx,ENABLE);
 8000dee:	2101      	movs	r1, #1
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f7ff fd4b 	bl	800088c <I2C_GenerateSTOP>
	}

	//7. re-enable The Acknowledging
	if(G_I2C_PinConfig[index].I2C_ACK_Control == I2C_ACK_Enable)
 8000df6:	7cfa      	ldrb	r2, [r7, #19]
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <MCAL_I2C_Master_RX+0xec>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	3318      	adds	r3, #24
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0c:	d104      	bne.n	8000e18 <MCAL_I2C_Master_RX+0xd8>
	{
		I2C_AcknowledgeConfig(I2Cx , ENABLE);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fcf9 	bl	8000808 <I2C_AcknowledgeConfig>
	}
	else
	{
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
	}
}
 8000e16:	e003      	b.n	8000e20 <MCAL_I2C_Master_RX+0xe0>
		I2C_AcknowledgeConfig(I2Cx , DISABLE);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fcf4 	bl	8000808 <I2C_AcknowledgeConfig>
}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	20000058 	.word	0x20000058

08000e30 <I2C1_EV_IRQHandler>:
//========================================================================
//======================= 	  ISR Functions     ==========================
//========================================================================

void I2C1_EV_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
	I2C_Typedef* I2Cx =I2C1 ;
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <I2C1_EV_IRQHandler+0xe0>)
 8000e3c:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e46:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e50:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00c      	beq.n	8000e7c <I2C1_EV_IRQHandler+0x4c>
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d009      	beq.n	8000e7c <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e74:	2100      	movs	r1, #0
 8000e76:	6978      	ldr	r0, [r7, #20]
 8000e78:	f7ff fd42 	bl	8000900 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d012      	beq.n	8000eb2 <I2C1_EV_IRQHandler+0x82>
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00f      	beq.n	8000eb2 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d109      	bne.n	8000eb2 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000eaa:	2102      	movs	r1, #2
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff fd27 	bl	8000900 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00c      	beq.n	8000edc <I2C1_EV_IRQHandler+0xac>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d009      	beq.n	8000edc <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff fd12 	bl	8000900 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee4:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00c      	beq.n	8000f06 <I2C1_EV_IRQHandler+0xd6>
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d009      	beq.n	8000f06 <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000efe:	2104      	movs	r1, #4
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff fcfd 	bl	8000900 <Slave_States>
		}
	}
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400

08000f14 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <MCAL_RCC_getSYSCLKFreq>:
1111: SYSCLK divided by 512
*/
const uint8_t AHBPrescTable [16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};


uint32_t MCAL_RCC_getSYSCLKFreq(void){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	Set and cleared by hardware to indicate which clock source is used as system clock.
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/
	switch((RCC->CFGR >> 2) & 0b11){
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MCAL_RCC_getSYSCLKFreq+0x34>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d00a      	beq.n	8000f60 <MCAL_RCC_getSYSCLKFreq+0x28>
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d80a      	bhi.n	8000f64 <MCAL_RCC_getSYSCLKFreq+0x2c>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <MCAL_RCC_getSYSCLKFreq+0x20>
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d002      	beq.n	8000f5c <MCAL_RCC_getSYSCLKFreq+0x24>
 8000f56:	e005      	b.n	8000f64 <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 0:
		return HSI_RC_CLK;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <MCAL_RCC_getSYSCLKFreq+0x38>)
 8000f5a:	e003      	b.n	8000f64 <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 1:
		//todo needed to be calculated user should specifiy it
		return HSE_CLK;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MCAL_RCC_getSYSCLKFreq+0x3c>)
 8000f5e:	e001      	b.n	8000f64 <MCAL_RCC_getSYSCLKFreq+0x2c>

	case 2:
		////todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <MCAL_RCC_getSYSCLKFreq+0x3c>)
 8000f62:	e7ff      	b.n	8000f64 <MCAL_RCC_getSYSCLKFreq+0x2c>
	}
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	007a1200 	.word	0x007a1200
 8000f74:	00f42400 	.word	0x00f42400

08000f78 <MCAL_RCC_getHCLKFreq>:


uint32_t MCAL_RCC_getHCLKFreq(void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSYSCLKFreq() >> AHBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000f7c:	f7ff ffdc 	bl	8000f38 <MCAL_RCC_getSYSCLKFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <MCAL_RCC_getHCLKFreq+0x20>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	4903      	ldr	r1, [pc, #12]	; (8000f9c <MCAL_RCC_getHCLKFreq+0x24>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	08001214 	.word	0x08001214

08000fa0 <MCAL_RCC_getPCLK1Freq>:

uint32_t MCAL_RCC_getPCLK1Freq(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 8000fa4:	f7ff ffe8 	bl	8000f78 <MCAL_RCC_getHCLKFreq>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <MCAL_RCC_getPCLK1Freq+0x20>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	4903      	ldr	r1, [pc, #12]	; (8000fc4 <MCAL_RCC_getPCLK1Freq+0x24>)
 8000fb6:	5ccb      	ldrb	r3, [r1, r3]
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	0800120c 	.word	0x0800120c

08000fc8 <SPI1_IRQHandler>:
	MCAL_SPI_receive_date(SPIx, data, pollEn);
}



void SPI1_IRQHandler(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SPI1_IRQHandler+0x50>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	793b      	ldrb	r3, [r7, #4]
 8000fdc:	f362 0300 	bfi	r3, r2, #0, #1
 8000fe0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <SPI1_IRQHandler+0x50>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	793b      	ldrb	r3, [r7, #4]
 8000fee:	f362 0341 	bfi	r3, r2, #1, #1
 8000ff2:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SPI1_IRQHandler+0x50>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	793b      	ldrb	r3, [r7, #4]
 8001002:	f362 0382 	bfi	r3, r2, #2, #1
 8001006:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI1_INDEX].p_IRQ_callback(irq_src);
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SPI1_IRQHandler+0x54>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	7938      	ldrb	r0, [r7, #4]
 800100e:	4798      	blx	r3
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013000 	.word	0x40013000
 800101c:	200000a0 	.word	0x200000a0

08001020 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	IRQ_SPI_src_t irq_src ;

	irq_src.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <SPI2_IRQHandler+0x50>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	085b      	lsrs	r3, r3, #1
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	793b      	ldrb	r3, [r7, #4]
 8001034:	f362 0300 	bfi	r3, r2, #0, #1
 8001038:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <SPI2_IRQHandler+0x50>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	f362 0341 	bfi	r3, r2, #1, #1
 800104a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SPI2_IRQHandler+0x50>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	f362 0382 	bfi	r3, r2, #2, #1
 800105e:	713b      	strb	r3, [r7, #4]

	global_SPI_config[SPI2_INDEX].p_IRQ_callback(irq_src);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SPI2_IRQHandler+0x54>)
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	7938      	ldrb	r0, [r7, #4]
 8001066:	4798      	blx	r3
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40003800 	.word	0x40003800
 8001074:	200000a0 	.word	0x200000a0

08001078 <USART1_IRQHandler>:
	//Waiting until transmission is complete
	while(!(USARTX->SR & 1 << 6));
}

//ISR
void USART1_IRQHandler (void){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 800107c:	4b02      	ldr	r3, [pc, #8]	; (8001088 <USART1_IRQHandler+0x10>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	4798      	blx	r3
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200000d0 	.word	0x200000d0

0800108c <USART2_IRQHandler>:

void USART2_IRQHandler (void){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <USART2_IRQHandler+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4798      	blx	r3
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200000d0 	.word	0x200000d0

080010a0 <USART3_IRQHandler>:

void USART3_IRQHandler (void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	Global_UART_Config->p_IRQ_callback();
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <USART3_IRQHandler+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	4798      	blx	r3
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000d0 	.word	0x200000d0

080010b4 <main>:
#include "../STM32F103_DRIVERS/inc/STM32_F103C6_GPIO_Driver.h"
#include "../STM32F103_DRIVERS/inc/STM32_F103C6_I2C_DRIVER.h"
#include "../HAL/inc/EEPROM.h"

int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC_GPIOA_CLK_EN();
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <main+0x94>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a22      	ldr	r2, [pc, #136]	; (8001148 <main+0x94>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <main+0x94>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <main+0x94>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6193      	str	r3, [r2, #24]

	//Test Case1
	uint8_t ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <main+0x98>)
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010dc:	6018      	str	r0, [r3, #0]
 80010de:	3304      	adds	r3, #4
 80010e0:	8019      	strh	r1, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c0a      	lsrs	r2, r1, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 80010e8:	2300      	movs	r3, #0
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2100      	movs	r1, #0
 80010f0:	460a      	mov	r2, r1
 80010f2:	801a      	strh	r2, [r3, #0]
 80010f4:	460a      	mov	r2, r1
 80010f6:	709a      	strb	r2, [r3, #2]

	eeprom_init();
 80010f8:	f7ff f83a 	bl	8000170 <eeprom_init>
	eeprom_write_nBytes(0xAF,ch1, 7);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2207      	movs	r2, #7
 8001102:	4619      	mov	r1, r3
 8001104:	20af      	movs	r0, #175	; 0xaf
 8001106:	f7ff f853 	bl	80001b0 <eeprom_write_nBytes>
	eeprom_read_nBytes(0xAF, ch2, 7);
 800110a:	463b      	mov	r3, r7
 800110c:	2207      	movs	r2, #7
 800110e:	4619      	mov	r1, r3
 8001110:	20af      	movs	r0, #175	; 0xaf
 8001112:	f7ff f8b5 	bl	8000280 <eeprom_read_nBytes>

	//Test Case2
	ch1[0] = 0xA;
 8001116:	230a      	movs	r3, #10
 8001118:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 800111a:	230b      	movs	r3, #11
 800111c:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 800111e:	230c      	movs	r3, #12
 8001120:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8001122:	230d      	movs	r3, #13
 8001124:	72fb      	strb	r3, [r7, #11]

	eeprom_write_nBytes(0x0FFF,ch1, 4);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2204      	movs	r2, #4
 800112c:	4619      	mov	r1, r3
 800112e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001132:	f7ff f83d 	bl	80001b0 <eeprom_write_nBytes>
	eeprom_read_nBytes(0x0FFF, ch2, 4);
 8001136:	463b      	mov	r3, r7
 8001138:	2204      	movs	r2, #4
 800113a:	4619      	mov	r1, r3
 800113c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001140:	f7ff f89e 	bl	8000280 <eeprom_read_nBytes>

    while(1)
 8001144:	e7fe      	b.n	8001144 <main+0x90>
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	08001204 	.word	0x08001204

08001150 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001154:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800117e:	f000 f811 	bl	80011a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001182:	f7ff ff97 	bl	80010b4 <main>

08001186 <LoopForever>:

LoopForever:
  b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001194:	0800122c 	.word	0x0800122c
  ldr r2, =_sbss
 8001198:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800119c:	200000d4 	.word	0x200000d4

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <__libc_init_array>:
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	2600      	movs	r6, #0
 80011a8:	4d0c      	ldr	r5, [pc, #48]	; (80011dc <__libc_init_array+0x38>)
 80011aa:	4c0d      	ldr	r4, [pc, #52]	; (80011e0 <__libc_init_array+0x3c>)
 80011ac:	1b64      	subs	r4, r4, r5
 80011ae:	10a4      	asrs	r4, r4, #2
 80011b0:	42a6      	cmp	r6, r4
 80011b2:	d109      	bne.n	80011c8 <__libc_init_array+0x24>
 80011b4:	f000 f81a 	bl	80011ec <_init>
 80011b8:	2600      	movs	r6, #0
 80011ba:	4d0a      	ldr	r5, [pc, #40]	; (80011e4 <__libc_init_array+0x40>)
 80011bc:	4c0a      	ldr	r4, [pc, #40]	; (80011e8 <__libc_init_array+0x44>)
 80011be:	1b64      	subs	r4, r4, r5
 80011c0:	10a4      	asrs	r4, r4, #2
 80011c2:	42a6      	cmp	r6, r4
 80011c4:	d105      	bne.n	80011d2 <__libc_init_array+0x2e>
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
 80011c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011cc:	4798      	blx	r3
 80011ce:	3601      	adds	r6, #1
 80011d0:	e7ee      	b.n	80011b0 <__libc_init_array+0xc>
 80011d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d6:	4798      	blx	r3
 80011d8:	3601      	adds	r6, #1
 80011da:	e7f2      	b.n	80011c2 <__libc_init_array+0x1e>
 80011dc:	08001224 	.word	0x08001224
 80011e0:	08001224 	.word	0x08001224
 80011e4:	08001224 	.word	0x08001224
 80011e8:	08001228 	.word	0x08001228

080011ec <_init>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	bf00      	nop
 80011f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f2:	bc08      	pop	{r3}
 80011f4:	469e      	mov	lr, r3
 80011f6:	4770      	bx	lr

080011f8 <_fini>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	bf00      	nop
 80011fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fe:	bc08      	pop	{r3}
 8001200:	469e      	mov	lr, r3
 8001202:	4770      	bx	lr
