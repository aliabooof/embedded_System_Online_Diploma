
AVR_PB_LED_T2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d0  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000530  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e9  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpio_init>:
#define DDRC 	*(vuint8_t*) (GPIO_BASE + 0x14)
#define PINC 	*(vuint8_t*) (GPIO_BASE + 0x13)
void gpio_init()
{
	// portD is output
	DDRD = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	
	//Pin 4 input in portC
	DDRC &= ~(1<<4);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8f 7e       	andi	r24, 0xEF	; 239
  74:	84 bb       	out	0x14, r24	; 20
  76:	08 95       	ret

00000078 <main>:
}


int main(void)
{
	gpio_init();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <gpio_init>
	uint8 count = 0, flag = 0;
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	03 c0       	rjmp	.+6      	; 0x88 <main+0x10>
				//to keep value 7 until toggle last led again
				if(flag == 1)
				{
					count--;
				}
				flag = 1;
  82:	31 e0       	ldi	r19, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <main+0x10>
				//to keep value 0 until toggle first led again
				if(flag != 1)
				{
					count++;
				}
				flag = 0;
  86:	30 e0       	ldi	r19, 0x00	; 0
{
	gpio_init();
	uint8 count = 0, flag = 0;
	while(1)
	{
		if(((PINC & (1<<4)) >> 4) == 0) //pressed
  88:	9c 99       	sbic	0x13, 4	; 19
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x10>
		{
			while(((PINC & (1<<4)) >> 4) == 0);  //single press
  8c:	9c 9b       	sbis	0x13, 4	; 19
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x14>
			//toggle led
			PORTD ^= (1<<count);
  90:	42 b3       	in	r20, 0x12	; 18
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 2e       	mov	r0, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x26>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <main+0x22>
  a2:	84 27       	eor	r24, r20
  a4:	82 bb       	out	0x12, r24	; 18
			//if reached last led
			if(count == 7)
  a6:	27 30       	cpi	r18, 0x07	; 7
  a8:	21 f4       	brne	.+8      	; 0xb2 <main+0x3a>
			{
				//to keep value 7 until toggle last led again
				if(flag == 1)
  aa:	31 30       	cpi	r19, 0x01	; 1
  ac:	51 f7       	brne	.-44     	; 0x82 <main+0xa>
				{
					count--;
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	eb cf       	rjmp	.-42     	; 0x88 <main+0x10>
				}
				flag = 1;

			}
			//if reach first led
			else if(flag == 1 && count != 0)
  b2:	31 30       	cpi	r19, 0x01	; 1
  b4:	21 f4       	brne	.+8      	; 0xbe <main+0x46>
  b6:	22 23       	and	r18, r18
  b8:	11 f0       	breq	.+4      	; 0xbe <main+0x46>
			{
				count--;
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	e5 cf       	rjmp	.-54     	; 0x88 <main+0x10>
			}
			else
			{
				//to keep value 0 until toggle first led again
				if(flag != 1)
  be:	31 30       	cpi	r19, 0x01	; 1
  c0:	11 f3       	breq	.-60     	; 0x86 <main+0xe>
				{
					count++;
  c2:	2f 5f       	subi	r18, 0xFF	; 255
				}
				flag = 0;
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	e0 cf       	rjmp	.-64     	; 0x88 <main+0x10>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
