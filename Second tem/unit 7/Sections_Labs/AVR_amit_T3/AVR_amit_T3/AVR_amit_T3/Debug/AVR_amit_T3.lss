
AVR_amit_T3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ff  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  000007eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f5  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <gpio_init>:
#define PIND 	*(vuint8_t*) (GPIO_BASE + 0x10)

void gpio_init()
{
	//Pin 0 input in portD
	DDRD &= ~(1<<0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	//Pin 4 output in portD
	DDRD |= (1<<4);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 61       	ori	r24, 0x10	; 16
  76:	81 bb       	out	0x11, r24	; 17
  78:	08 95       	ret

0000007a <delay>:
}
void delay(vuint32_t x)
{
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	00 d0       	rcall	.+0      	; 0x80 <delay+0x6>
  80:	00 d0       	rcall	.+0      	; 0x82 <delay+0x8>
  82:	00 d0       	rcall	.+0      	; 0x84 <delay+0xa>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	9e 83       	std	Y+6, r25	; 0x06
  8a:	8d 83       	std	Y+5, r24	; 0x05
	vuint32_t i, j;
	for (i = 0; i < x; ++i)
  8c:	1a 82       	std	Y+2, r1	; 0x02
  8e:	19 82       	std	Y+1, r1	; 0x01
  90:	12 c0       	rjmp	.+36     	; 0xb6 <delay+0x3c>
	for (j = 0; j < 255; ++j);
  92:	1c 82       	std	Y+4, r1	; 0x04
  94:	1b 82       	std	Y+3, r1	; 0x03
  96:	05 c0       	rjmp	.+10     	; 0xa2 <delay+0x28>
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	9c 83       	std	Y+4, r25	; 0x04
  a0:	8b 83       	std	Y+3, r24	; 0x03
  a2:	8b 81       	ldd	r24, Y+3	; 0x03
  a4:	9c 81       	ldd	r25, Y+4	; 0x04
  a6:	8f 3f       	cpi	r24, 0xFF	; 255
  a8:	91 05       	cpc	r25, r1
  aa:	b0 f3       	brcs	.-20     	; 0x98 <delay+0x1e>
	DDRD |= (1<<4);
}
void delay(vuint32_t x)
{
	vuint32_t i, j;
	for (i = 0; i < x; ++i)
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	89 83       	std	Y+1, r24	; 0x01
  b6:	29 81       	ldd	r18, Y+1	; 0x01
  b8:	3a 81       	ldd	r19, Y+2	; 0x02
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	9e 81       	ldd	r25, Y+6	; 0x06
  be:	28 17       	cp	r18, r24
  c0:	39 07       	cpc	r19, r25
  c2:	38 f3       	brcs	.-50     	; 0x92 <delay+0x18>
	for (j = 0; j < 255; ++j);
}
  c4:	26 96       	adiw	r28, 0x06	; 6
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:
int main(void)
{
	gpio_init();
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <gpio_init>
	while(1)
	{
		if(((PIND & (1<<0)) >> 0) == 1) //pressed
  da:	80 9b       	sbis	0x10, 0	; 16
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x4>
		{
			//turn buzzer on
			PORTD |= (1<<4);
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	82 bb       	out	0x12, r24	; 18
			delay(500);
  e4:	84 ef       	ldi	r24, 0xF4	; 244
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 3d 00 	call	0x7a	; 0x7a <delay>
			//turn buzzer off
			PORTD &= ~(1<<4);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8f 7e       	andi	r24, 0xEF	; 239
  f0:	82 bb       	out	0x12, r24	; 18
			while((PIND & 1) == 1); //single press
  f2:	80 99       	sbic	0x10, 0	; 16
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <main+0x1c>
  f6:	f1 cf       	rjmp	.-30     	; 0xda <main+0x4>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
