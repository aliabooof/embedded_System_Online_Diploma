
Interfacing LCD and KEYPAD on stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000cf8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000cf8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f28  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000537  00000000  00000000  00020fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000007ac  00000000  00000000  000214eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00021c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000108  00000000  00000000  00021de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000020e2  00000000  00000000  00021ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001e2c  00000000  00000000  00023fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00007e69  00000000  00000000  00025dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003f8  00000000  00000000  0002dc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c8c 	.word	0x08000c8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c8c 	.word	0x08000c8c

08000170 <KEYPAD_INIT>:

int KEYPAD_ROWS[]={R0,R1,R2,R3};

int KEYPAD_COLS[]={C0,C1,C2,C3};

void KEYPAD_INIT(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	GPIO_PIN_Config_t* PinCfg ;
	PinCfg->GPIO_PinNumber = R0;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2201      	movs	r2, #1
 800017a:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2204      	movs	r2, #4
 8000180:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2201      	movs	r2, #1
 8000186:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 8000188:	6879      	ldr	r1, [r7, #4]
 800018a:	4833      	ldr	r0, [pc, #204]	; (8000258 <KEYPAD_INIT+0xe8>)
 800018c:	f000 fb8a 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = R1;
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	2202      	movs	r2, #2
 8000194:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2204      	movs	r2, #4
 800019a:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	2201      	movs	r2, #1
 80001a0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 80001a2:	6879      	ldr	r1, [r7, #4]
 80001a4:	482c      	ldr	r0, [pc, #176]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001a6:	f000 fb7d 	bl	80008a4 <MCAL_GPIO_Init>
	PinCfg->GPIO_PinNumber = R2;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2208      	movs	r2, #8
 80001ae:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2204      	movs	r2, #4
 80001b4:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2201      	movs	r2, #1
 80001ba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 80001bc:	6879      	ldr	r1, [r7, #4]
 80001be:	4826      	ldr	r0, [pc, #152]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001c0:	f000 fb70 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = R3;
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2210      	movs	r2, #16
 80001c8:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2204      	movs	r2, #4
 80001ce:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2201      	movs	r2, #1
 80001d4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	481f      	ldr	r0, [pc, #124]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001da:	f000 fb63 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = C0;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2220      	movs	r2, #32
 80001e2:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2204      	movs	r2, #4
 80001e8:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 80001f0:	6879      	ldr	r1, [r7, #4]
 80001f2:	4819      	ldr	r0, [pc, #100]	; (8000258 <KEYPAD_INIT+0xe8>)
 80001f4:	f000 fb56 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = C1;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2240      	movs	r2, #64	; 0x40
 80001fc:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2204      	movs	r2, #4
 8000202:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2201      	movs	r2, #1
 8000208:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	4812      	ldr	r0, [pc, #72]	; (8000258 <KEYPAD_INIT+0xe8>)
 800020e:	f000 fb49 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = C2;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2280      	movs	r2, #128	; 0x80
 8000216:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2204      	movs	r2, #4
 800021c:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2201      	movs	r2, #1
 8000222:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 8000224:	6879      	ldr	r1, [r7, #4]
 8000226:	480c      	ldr	r0, [pc, #48]	; (8000258 <KEYPAD_INIT+0xe8>)
 8000228:	f000 fb3c 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = C3;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2204      	movs	r2, #4
 8000238:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2201      	movs	r2, #1
 800023e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, PinCfg);
 8000240:	6879      	ldr	r1, [r7, #4]
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <KEYPAD_INIT+0xe8>)
 8000244:	f000 fb2e 	bl	80008a4 <MCAL_GPIO_Init>



	MCAL_GPIO_WritePort(GPIOB, 0xFF);
 8000248:	21ff      	movs	r1, #255	; 0xff
 800024a:	4803      	ldr	r0, [pc, #12]	; (8000258 <KEYPAD_INIT+0xe8>)
 800024c:	f000 fbe4 	bl	8000a18 <MCAL_GPIO_WritePort>

}
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010c00 	.word	0x40010c00

0800025c <KEYPAD_GETCHAR>:

char KEYPAD_GETCHAR(){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0

	int i,j;
	for(i=0;i<4;i++){
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	e0b4      	b.n	80003d2 <KEYPAD_GETCHAR+0x176>
		MCAL_GPIO_WritePin(GPIOB, KEYPAD_COLS[0], GPIO_PIN_SET);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	485d      	ldr	r0, [pc, #372]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000274:	f000 fbb9 	bl	80009ea <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, KEYPAD_COLS[1], GPIO_PIN_SET);
 8000278:	4b5a      	ldr	r3, [pc, #360]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4859      	ldr	r0, [pc, #356]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000284:	f000 fbb1 	bl	80009ea <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, KEYPAD_COLS[2], GPIO_PIN_SET);
 8000288:	4b56      	ldr	r3, [pc, #344]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	b29b      	uxth	r3, r3
 800028e:	2201      	movs	r2, #1
 8000290:	4619      	mov	r1, r3
 8000292:	4855      	ldr	r0, [pc, #340]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 8000294:	f000 fba9 	bl	80009ea <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, KEYPAD_COLS[3], GPIO_PIN_SET);
 8000298:	4b52      	ldr	r3, [pc, #328]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	b29b      	uxth	r3, r3
 800029e:	2201      	movs	r2, #1
 80002a0:	4619      	mov	r1, r3
 80002a2:	4851      	ldr	r0, [pc, #324]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002a4:	f000 fba1 	bl	80009ea <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, KEYPAD_COLS[i],GPIO_PIN_RESET);
 80002a8:	4a4e      	ldr	r2, [pc, #312]	; (80003e4 <KEYPAD_GETCHAR+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	2200      	movs	r2, #0
 80002b4:	4619      	mov	r1, r3
 80002b6:	484c      	ldr	r0, [pc, #304]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002b8:	f000 fb97 	bl	80009ea <MCAL_GPIO_WritePin>

		for(j=0;j<4;j++){
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e080      	b.n	80003c4 <KEYPAD_GETCHAR+0x168>
			if(MCAL_GPIO_ReadPin(GPIOB, KEYPAD_ROWS[j])==0){
 80002c2:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <KEYPAD_GETCHAR+0x190>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	4619      	mov	r1, r3
 80002ce:	4846      	ldr	r0, [pc, #280]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002d0:	f000 fb74 	bl	80009bc <MCAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d171      	bne.n	80003be <KEYPAD_GETCHAR+0x162>
				while(MCAL_GPIO_ReadPin(GPIOB, KEYPAD_ROWS[j]) == 0);
 80002da:	bf00      	nop
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <KEYPAD_GETCHAR+0x190>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	483f      	ldr	r0, [pc, #252]	; (80003e8 <KEYPAD_GETCHAR+0x18c>)
 80002ea:	f000 fb67 	bl	80009bc <MCAL_GPIO_ReadPin>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f3      	beq.n	80002dc <KEYPAD_GETCHAR+0x80>

				switch (i) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d861      	bhi.n	80003be <KEYPAD_GETCHAR+0x162>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <KEYPAD_GETCHAR+0xa4>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000339 	.word	0x08000339
 8000308:	08000361 	.word	0x08000361
 800030c:	08000389 	.word	0x08000389
				case (0):{
					if (j == 0)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <KEYPAD_GETCHAR+0xbe>
						return '7';
 8000316:	2337      	movs	r3, #55	; 0x37
 8000318:	e060      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 1)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d101      	bne.n	8000324 <KEYPAD_GETCHAR+0xc8>
						return '4';
 8000320:	2334      	movs	r3, #52	; 0x34
 8000322:	e05b      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 2)
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d101      	bne.n	800032e <KEYPAD_GETCHAR+0xd2>
						return '1';
 800032a:	2331      	movs	r3, #49	; 0x31
 800032c:	e056      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 3)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d13d      	bne.n	80003b0 <KEYPAD_GETCHAR+0x154>
						return '?';
 8000334:	233f      	movs	r3, #63	; 0x3f
 8000336:	e051      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
				}
				break;
				case (1):{
					if (j == 0)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d101      	bne.n	8000342 <KEYPAD_GETCHAR+0xe6>
						return '8';
 800033e:	2338      	movs	r3, #56	; 0x38
 8000340:	e04c      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 1)
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d101      	bne.n	800034c <KEYPAD_GETCHAR+0xf0>
						return '5';
 8000348:	2335      	movs	r3, #53	; 0x35
 800034a:	e047      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 2)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d101      	bne.n	8000356 <KEYPAD_GETCHAR+0xfa>
						return '2';
 8000352:	2332      	movs	r3, #50	; 0x32
 8000354:	e042      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 3)
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	2b03      	cmp	r3, #3
 800035a:	d12b      	bne.n	80003b4 <KEYPAD_GETCHAR+0x158>
						return '0';
 800035c:	2330      	movs	r3, #48	; 0x30
 800035e:	e03d      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
				}
				break;
				case (2):{
					if (j == 0)
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <KEYPAD_GETCHAR+0x10e>
						return '9';
 8000366:	2339      	movs	r3, #57	; 0x39
 8000368:	e038      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 1)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <KEYPAD_GETCHAR+0x118>
						return '6';
 8000370:	2336      	movs	r3, #54	; 0x36
 8000372:	e033      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 2)
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <KEYPAD_GETCHAR+0x122>
						return '3';
 800037a:	2333      	movs	r3, #51	; 0x33
 800037c:	e02e      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 3)
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d119      	bne.n	80003b8 <KEYPAD_GETCHAR+0x15c>
						return '=';
 8000384:	233d      	movs	r3, #61	; 0x3d
 8000386:	e029      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
				}
				break;
				case (3):{
					if (j == 0)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <KEYPAD_GETCHAR+0x136>
						return '/';
 800038e:	232f      	movs	r3, #47	; 0x2f
 8000390:	e024      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 1)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <KEYPAD_GETCHAR+0x140>
						return '*';
 8000398:	232a      	movs	r3, #42	; 0x2a
 800039a:	e01f      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 2)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <KEYPAD_GETCHAR+0x14a>
						return '-';
 80003a2:	232d      	movs	r3, #45	; 0x2d
 80003a4:	e01a      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
					else if (j == 3)
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d107      	bne.n	80003bc <KEYPAD_GETCHAR+0x160>
						return '+';
 80003ac:	232b      	movs	r3, #43	; 0x2b
 80003ae:	e015      	b.n	80003dc <KEYPAD_GETCHAR+0x180>
				break;
 80003b0:	bf00      	nop
 80003b2:	e004      	b.n	80003be <KEYPAD_GETCHAR+0x162>
				break;
 80003b4:	bf00      	nop
 80003b6:	e002      	b.n	80003be <KEYPAD_GETCHAR+0x162>
				break;
 80003b8:	bf00      	nop
 80003ba:	e000      	b.n	80003be <KEYPAD_GETCHAR+0x162>
				}
				break;
 80003bc:	bf00      	nop
		for(j=0;j<4;j++){
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	603b      	str	r3, [r7, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f77f af7b 	ble.w	80002c2 <KEYPAD_GETCHAR+0x66>
	for(i=0;i<4;i++){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3301      	adds	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	f77f af47 	ble.w	8000268 <KEYPAD_GETCHAR+0xc>
				}
			}
		}
	}
	return 'A';
 80003da:	2341      	movs	r3, #65	; 0x41
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000010 	.word	0x20000010
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	20000000 	.word	0x20000000

080003f0 <delay_ms>:
 */


#include "../inc/LCD.h"

void delay_ms(uint32_t time) {
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	e00b      	b.n	8000416 <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 80003fe:	2300      	movs	r3, #0
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	e002      	b.n	800040a <delay_ms+0x1a>
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3301      	adds	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2bfe      	cmp	r3, #254	; 0xfe
 800040e:	d9f9      	bls.n	8000404 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3301      	adds	r3, #1
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	d3ef      	bcc.n	80003fe <delay_ms+0xe>
}
 800041e:	bf00      	nop
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	4603      	mov	r3, r0
 8000432:	460a      	mov	r2, r1
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	4613      	mov	r3, r2
 8000438:	71bb      	strb	r3, [r7, #6]
	if(line==0){
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d108      	bne.n	8000452 <LCD_GOTO_XY+0x28>
		if(position<16 && position>=0){
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	2b0f      	cmp	r3, #15
 8000444:	d805      	bhi.n	8000452 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	3b80      	subs	r3, #128	; 0x80
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f8fb 	bl	8000648 <LCD_WRITE_COMMAND>
		}
	}
	if(line == 1){
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d108      	bne.n	800046a <LCD_GOTO_XY+0x40>
		if(position<16 && position>=0){
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	2b0f      	cmp	r3, #15
 800045c:	d805      	bhi.n	800046a <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	3b40      	subs	r3, #64	; 0x40
 8000462:	b2db      	uxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f000 f8ef 	bl	8000648 <LCD_WRITE_COMMAND>
		}
	}
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <LCD_clearscreen>:

void LCD_clearscreen(){
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000476:	2001      	movs	r0, #1
 8000478:	f000 f8e6 	bl	8000648 <LCD_WRITE_COMMAND>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <LCD_kick>:

void LCD_kick(){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_PORT, E_SWITCH,GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048a:	4807      	ldr	r0, [pc, #28]	; (80004a8 <LCD_kick+0x28>)
 800048c:	f000 faad 	bl	80009ea <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000490:	2032      	movs	r0, #50	; 0x32
 8000492:	f7ff ffad 	bl	80003f0 <delay_ms>
	MCAL_GPIO_WritePin(LCD_PORT, E_SWITCH,GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <LCD_kick+0x28>)
 800049e:	f000 faa4 	bl	80009ea <MCAL_GPIO_WritePin>

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800

080004ac <LCD_PORT_OUT>:

void  LCD_PORT_OUT(){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

	GPIO_PIN_Config_t* PinCfg ;

	PinCfg->GPIO_PinNumber = GPIO_PIN_0;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2201      	movs	r2, #1
 80004b6:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2204      	movs	r2, #4
 80004bc:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2201      	movs	r2, #1
 80004c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	4831      	ldr	r0, [pc, #196]	; (800058c <LCD_PORT_OUT+0xe0>)
 80004c8:	f000 f9ec 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_1;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2202      	movs	r2, #2
 80004d0:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2204      	movs	r2, #4
 80004d6:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2201      	movs	r2, #1
 80004dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80004de:	6879      	ldr	r1, [r7, #4]
 80004e0:	482a      	ldr	r0, [pc, #168]	; (800058c <LCD_PORT_OUT+0xe0>)
 80004e2:	f000 f9df 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_2;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2204      	movs	r2, #4
 80004ea:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2204      	movs	r2, #4
 80004f0:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2201      	movs	r2, #1
 80004f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	4824      	ldr	r0, [pc, #144]	; (800058c <LCD_PORT_OUT+0xe0>)
 80004fc:	f000 f9d2 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_3;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2208      	movs	r2, #8
 8000504:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2204      	movs	r2, #4
 800050a:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2201      	movs	r2, #1
 8000510:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	481d      	ldr	r0, [pc, #116]	; (800058c <LCD_PORT_OUT+0xe0>)
 8000516:	f000 f9c5 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2210      	movs	r2, #16
 800051e:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2204      	movs	r2, #4
 8000524:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2201      	movs	r2, #1
 800052a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 800052c:	6879      	ldr	r1, [r7, #4]
 800052e:	4817      	ldr	r0, [pc, #92]	; (800058c <LCD_PORT_OUT+0xe0>)
 8000530:	f000 f9b8 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_5;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2220      	movs	r2, #32
 8000538:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2204      	movs	r2, #4
 800053e:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2201      	movs	r2, #1
 8000544:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	4810      	ldr	r0, [pc, #64]	; (800058c <LCD_PORT_OUT+0xe0>)
 800054a:	f000 f9ab 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_6;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2240      	movs	r2, #64	; 0x40
 8000552:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2204      	movs	r2, #4
 8000558:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <LCD_PORT_OUT+0xe0>)
 8000564:	f000 f99e 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = GPIO_PIN_7;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2204      	movs	r2, #4
 8000572:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2201      	movs	r2, #1
 8000578:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <LCD_PORT_OUT+0xe0>)
 800057e:	f000 f991 	bl	80008a4 <MCAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010800 	.word	0x40010800

08000590 <LCD_INIT>:
 * @param [out] - none
 * @retval	 	- none
 * Note
 *
 */
void LCD_INIT(){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	GPIO_PIN_Config_t* PinCfg ;

	delay_ms(20);
 8000596:	2014      	movs	r0, #20
 8000598:	f7ff ff2a 	bl	80003f0 <delay_ms>
	// make RW , RS and E switches as input
	PinCfg->GPIO_PinNumber = RW_SWITCH;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a2:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2204      	movs	r2, #4
 80005a8:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80005b0:	6879      	ldr	r1, [r7, #4]
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <LCD_INIT+0xb4>)
 80005b4:	f000 f976 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = RS_SWITCH;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005be:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2204      	movs	r2, #4
 80005c4:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2201      	movs	r2, #1
 80005ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	481d      	ldr	r0, [pc, #116]	; (8000644 <LCD_INIT+0xb4>)
 80005d0:	f000 f968 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg->GPIO_PinNumber = E_SWITCH;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005da:	801a      	strh	r2, [r3, #0]
	PinCfg->GPIO_PinMode= GPIO_MODE_OUTPUT_PP;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2204      	movs	r2, #4
 80005e0:	709a      	strb	r2, [r3, #2]
	PinCfg->GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2201      	movs	r2, #1
 80005e6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, PinCfg);
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <LCD_INIT+0xb4>)
 80005ec:	f000 f95a 	bl	80008a4 <MCAL_GPIO_Init>


	LCD_PORT_OUT();
 80005f0:	f7ff ff5c 	bl	80004ac <LCD_PORT_OUT>

	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH,GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <LCD_INIT+0xb4>)
 80005fc:	f000 f9f5 	bl	80009ea <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH,GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <LCD_INIT+0xb4>)
 8000608:	f000 f9ef 	bl	80009ea <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, E_SWITCH,GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <LCD_INIT+0xb4>)
 8000614:	f000 f9e9 	bl	80009ea <MCAL_GPIO_WritePin>


	delay_ms(15);
 8000618:	200f      	movs	r0, #15
 800061a:	f7ff fee9 	bl	80003f0 <delay_ms>
	LCD_clearscreen();
 800061e:	f7ff ff28 	bl	8000472 <LCD_clearscreen>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000622:	2038      	movs	r0, #56	; 0x38
 8000624:	f000 f810 	bl	8000648 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000628:	2006      	movs	r0, #6
 800062a:	f000 f80d 	bl	8000648 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	f000 f80a 	bl	8000648 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000634:	200f      	movs	r0, #15
 8000636:	f000 f807 	bl	8000648 <LCD_WRITE_COMMAND>



}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800

08000648 <LCD_WRITE_COMMAND>:
 * @param [out] - none
 * @retval	 	- none
 * Note
 *
 */
void LCD_WRITE_COMMAND(unsigned char command){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();


	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4619      	mov	r1, r3
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <LCD_WRITE_COMMAND+0x40>)
 800065a:	f000 f9dd 	bl	8000a18 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH,GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <LCD_WRITE_COMMAND+0x40>)
 8000666:	f000 f9c0 	bl	80009ea <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH,GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <LCD_WRITE_COMMAND+0x40>)
 8000672:	f000 f9ba 	bl	80009ea <MCAL_GPIO_WritePin>
	delay_ms(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff feba 	bl	80003f0 <delay_ms>
	LCD_kick();
 800067c:	f7ff ff00 	bl	8000480 <LCD_kick>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40010800 	.word	0x40010800

0800068c <LCD_WRITE_CHAR>:
 * @param [out] - none
 * @retval	 	- none
 * Note
 *
 */
void LCD_WRITE_CHAR(unsigned char character){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();

	LCD_PORT_OUT();
 8000696:	f7ff ff09 	bl	80004ac <LCD_PORT_OUT>
	MCAL_GPIO_WritePort(LCD_PORT, character);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	b29b      	uxth	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <LCD_WRITE_CHAR+0x44>)
 80006a2:	f000 f9b9 	bl	8000a18 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <LCD_WRITE_CHAR+0x44>)
 80006ae:	f000 f99c 	bl	80009ea <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	4805      	ldr	r0, [pc, #20]	; (80006d0 <LCD_WRITE_CHAR+0x44>)
 80006ba:	f000 f996 	bl	80009ea <MCAL_GPIO_WritePin>
	delay_ms(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fe96 	bl	80003f0 <delay_ms>
	LCD_kick();
 80006c4:	f7ff fedc 	bl	8000480 <LCD_kick>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40010800 	.word	0x40010800

080006d4 <LCD_WRITE_STRING>:
 * @param [out] - none
 * @retval	 	- none
 * Note
 *
 */
void LCD_WRITE_STRING(char* string){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

	int count =0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
	while(*string >0){
 80006e0:	e01e      	b.n	8000720 <LCD_WRITE_STRING+0x4c>

		count++;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffcb 	bl	800068c <LCD_WRITE_CHAR>

		if(count==16){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d103      	bne.n	8000704 <LCD_WRITE_STRING+0x30>
			LCD_GOTO_XY(1, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff fe93 	bl	800042a <LCD_GOTO_XY>
		}
		if(count==32||count==33){
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b20      	cmp	r3, #32
 8000708:	d002      	beq.n	8000710 <LCD_WRITE_STRING+0x3c>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b21      	cmp	r3, #33	; 0x21
 800070e:	d107      	bne.n	8000720 <LCD_WRITE_STRING+0x4c>
			LCD_clearscreen();
 8000710:	f7ff feaf 	bl	8000472 <LCD_clearscreen>
			LCD_GOTO_XY(0, 0);
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fe87 	bl	800042a <LCD_GOTO_XY>
			count = 0 ;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
	while(*string >0){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1dc      	bne.n	80006e2 <LCD_WRITE_STRING+0xe>
		}
	}

}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <Get_CRLH_position>:
 *      Author: aliab
 */

#include "../inc/STM32_F103C6_Driver.h"

uint16_t Get_CRLH_position(uint16_t PinNumber){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000744:	f000 80a5 	beq.w	8000892 <Get_CRLH_position+0x15e>
 8000748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800074c:	f300 80a3 	bgt.w	8000896 <Get_CRLH_position+0x162>
 8000750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000754:	f000 809b 	beq.w	800088e <Get_CRLH_position+0x15a>
 8000758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800075c:	f300 809b 	bgt.w	8000896 <Get_CRLH_position+0x162>
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000764:	f000 8091 	beq.w	800088a <Get_CRLH_position+0x156>
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076c:	f300 8093 	bgt.w	8000896 <Get_CRLH_position+0x162>
 8000770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000774:	f000 8087 	beq.w	8000886 <Get_CRLH_position+0x152>
 8000778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800077c:	f300 808b 	bgt.w	8000896 <Get_CRLH_position+0x162>
 8000780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000784:	d07d      	beq.n	8000882 <Get_CRLH_position+0x14e>
 8000786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800078a:	f300 8084 	bgt.w	8000896 <Get_CRLH_position+0x162>
 800078e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000792:	d074      	beq.n	800087e <Get_CRLH_position+0x14a>
 8000794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000798:	dc7d      	bgt.n	8000896 <Get_CRLH_position+0x162>
 800079a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800079e:	d06c      	beq.n	800087a <Get_CRLH_position+0x146>
 80007a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a4:	dc77      	bgt.n	8000896 <Get_CRLH_position+0x162>
 80007a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007aa:	d064      	beq.n	8000876 <Get_CRLH_position+0x142>
 80007ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007b0:	dc71      	bgt.n	8000896 <Get_CRLH_position+0x162>
 80007b2:	2b80      	cmp	r3, #128	; 0x80
 80007b4:	d05d      	beq.n	8000872 <Get_CRLH_position+0x13e>
 80007b6:	2b80      	cmp	r3, #128	; 0x80
 80007b8:	dc6d      	bgt.n	8000896 <Get_CRLH_position+0x162>
 80007ba:	2b20      	cmp	r3, #32
 80007bc:	dc48      	bgt.n	8000850 <Get_CRLH_position+0x11c>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dd69      	ble.n	8000896 <Get_CRLH_position+0x162>
 80007c2:	3b01      	subs	r3, #1
 80007c4:	2b1f      	cmp	r3, #31
 80007c6:	d866      	bhi.n	8000896 <Get_CRLH_position+0x162>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <Get_CRLH_position+0x9c>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	08000857 	.word	0x08000857
 80007d4:	0800085b 	.word	0x0800085b
 80007d8:	08000897 	.word	0x08000897
 80007dc:	0800085f 	.word	0x0800085f
 80007e0:	08000897 	.word	0x08000897
 80007e4:	08000897 	.word	0x08000897
 80007e8:	08000897 	.word	0x08000897
 80007ec:	08000863 	.word	0x08000863
 80007f0:	08000897 	.word	0x08000897
 80007f4:	08000897 	.word	0x08000897
 80007f8:	08000897 	.word	0x08000897
 80007fc:	08000897 	.word	0x08000897
 8000800:	08000897 	.word	0x08000897
 8000804:	08000897 	.word	0x08000897
 8000808:	08000897 	.word	0x08000897
 800080c:	08000867 	.word	0x08000867
 8000810:	08000897 	.word	0x08000897
 8000814:	08000897 	.word	0x08000897
 8000818:	08000897 	.word	0x08000897
 800081c:	08000897 	.word	0x08000897
 8000820:	08000897 	.word	0x08000897
 8000824:	08000897 	.word	0x08000897
 8000828:	08000897 	.word	0x08000897
 800082c:	08000897 	.word	0x08000897
 8000830:	08000897 	.word	0x08000897
 8000834:	08000897 	.word	0x08000897
 8000838:	08000897 	.word	0x08000897
 800083c:	08000897 	.word	0x08000897
 8000840:	08000897 	.word	0x08000897
 8000844:	08000897 	.word	0x08000897
 8000848:	08000897 	.word	0x08000897
 800084c:	0800086b 	.word	0x0800086b
 8000850:	2b40      	cmp	r3, #64	; 0x40
 8000852:	d00c      	beq.n	800086e <Get_CRLH_position+0x13a>
 8000854:	e01f      	b.n	8000896 <Get_CRLH_position+0x162>
	//position for pins from 0>>>7 in CRL register
	case GPIO_PIN_0  : return 0;
 8000856:	2300      	movs	r3, #0
 8000858:	e01e      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_1  : return 4;
 800085a:	2304      	movs	r3, #4
 800085c:	e01c      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_2  : return 8;
 800085e:	2308      	movs	r3, #8
 8000860:	e01a      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_3  : return 12;
 8000862:	230c      	movs	r3, #12
 8000864:	e018      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_4  : return 16;
 8000866:	2310      	movs	r3, #16
 8000868:	e016      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_5  : return 20;
 800086a:	2314      	movs	r3, #20
 800086c:	e014      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_6  : return 24;
 800086e:	2318      	movs	r3, #24
 8000870:	e012      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_7  : return 28;
 8000872:	231c      	movs	r3, #28
 8000874:	e010      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	//position for pins from 8>>>15 in CRH register
	case GPIO_PIN_8  : return 0;
 8000876:	2300      	movs	r3, #0
 8000878:	e00e      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_9  : return 4;
 800087a:	2304      	movs	r3, #4
 800087c:	e00c      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_10 : return 8;
 800087e:	2308      	movs	r3, #8
 8000880:	e00a      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_11 : return 12;
 8000882:	230c      	movs	r3, #12
 8000884:	e008      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_12 : return 16;
 8000886:	2310      	movs	r3, #16
 8000888:	e006      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_13 : return 20;
 800088a:	2314      	movs	r3, #20
 800088c:	e004      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_14 : return 24;
 800088e:	2318      	movs	r3, #24
 8000890:	e002      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	case GPIO_PIN_15 : return 28;
 8000892:	231c      	movs	r3, #28
 8000894:	e000      	b.n	8000898 <Get_CRLH_position+0x164>
	break;
	}
	return 0;
 8000896:	2300      	movs	r3, #0
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <MCAL_GPIO_Init>:
 * Note			-stm32f103c6 MCU has GPIO A,B,C,D,E modules
 * 				 but LQFPP48 has only GPIO A ,B and part of E,D exported as external pins from THE MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_PIN_Config_t * PinConfig){
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	uint8_t pin_config = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t *ConfigRegister = NULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
	//pins from 0>>>7 in CRL register and from 8>>>15 in CRH register
	ConfigRegister = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->CRL) :(&GPIOx->CRH);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	2bff      	cmp	r3, #255	; 0xff
 80008be:	d801      	bhi.n	80008c4 <MCAL_GPIO_Init+0x20>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	e001      	b.n	80008c8 <MCAL_GPIO_Init+0x24>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3304      	adds	r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]

	//resets pin state before configure it
	* ConfigRegister &= ~ (0XF << (Get_CRLH_position(PinConfig->GPIO_PinNumber)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff2f 	bl	8000734 <Get_CRLH_position>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	230f      	movs	r3, #15
 80008dc:	4093      	lsls	r3, r2
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	401a      	ands	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	601a      	str	r2, [r3, #0]
	// if the pin is output
	if(PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_OD ||PinConfig->GPIO_PinMode == GPIO_MODE_OUTPUT_AF_PP ||PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG_AF_OD )
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	789b      	ldrb	r3, [r3, #2]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d00e      	beq.n	8000912 <MCAL_GPIO_Init+0x6e>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d009      	beq.n	8000912 <MCAL_GPIO_Init+0x6e>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	789b      	ldrb	r3, [r3, #2]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b06      	cmp	r3, #6
 8000906:	d004      	beq.n	8000912 <MCAL_GPIO_Init+0x6e>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b07      	cmp	r3, #7
 8000910:	d110      	bne.n	8000934 <MCAL_GPIO_Init+0x90>
	{
		//CNFy[1:0] MODEy[1:0] 4bits for pin configuration
		pin_config = ( (((PinConfig->GPIO_PinMode) - 4) <<2) | ((PinConfig->GPIO_OUTPUT_SPEED) & 0x0F));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	3b04      	subs	r3, #4
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	b25a      	sxtb	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	b25b      	sxtb	r3, r3
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	b25b      	sxtb	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b25b      	sxtb	r3, r3
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e030      	b.n	8000996 <MCAL_GPIO_Init+0xf2>

	}
	// if the pin is input
	else{ // MODE = 00 :input mode (reset state)

		if(PinConfig->GPIO_PinMode == GPIO_MODE_ANALOG ||PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_FLO)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <MCAL_GPIO_Init+0xa4>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <MCAL_GPIO_Init+0xb0>
		{
			pin_config = ( ((PinConfig->GPIO_PinMode) <<2) | (0x0 & 0x0F));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	e020      	b.n	8000996 <MCAL_GPIO_Init+0xf2>

		}
		else if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_AF) //works as floating
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	789b      	ldrb	r3, [r3, #2]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b08      	cmp	r3, #8
 800095c:	d102      	bne.n	8000964 <MCAL_GPIO_Init+0xc0>
		{
			pin_config = ( ((GPIO_MODE_INPUT_FLO) <<2) | (0x0 & 0x0F));
 800095e:	2304      	movs	r3, #4
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e018      	b.n	8000996 <MCAL_GPIO_Init+0xf2>

		}
		else
		{
			pin_config = ( ((GPIO_MODE_INPUT_PU) <<2) | (0x0 & 0x0F));
 8000964:	2308      	movs	r3, #8
 8000966:	73fb      	strb	r3, [r7, #15]
			//Table 20. Port bit configuration table
			if(PinConfig->GPIO_PinMode == GPIO_MODE_INPUT_PU)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b02      	cmp	r3, #2
 8000970:	d108      	bne.n	8000984 <MCAL_GPIO_Init+0xe0>
			{
				//set PxODR register to 1 if its input  pull up mode
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	431a      	orrs	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	e008      	b.n	8000996 <MCAL_GPIO_Init+0xf2>
			}
			else
			{
				//set PxODR register to 0 if its input  pull up mode
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber); // note that pin number already got shifted
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	401a      	ands	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60da      	str	r2, [r3, #12]
		}



	}
	* ConfigRegister |= ( (pin_config) << Get_CRLH_position(PinConfig->GPIO_PinNumber));
 8000996:	7bfc      	ldrb	r4, [r7, #15]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29b      	uxth	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fec8 	bl	8000734 <Get_CRLH_position>
 80009a4:	4603      	mov	r3, r0
 80009a6:	fa04 f203 	lsl.w	r2, r4, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}

080009bc <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PIN number : set PIN number according @ref GPIO_PINS_define
 * @retval	 	-input PIN value (two values according @ref GPIO_PIN_stat)
 * Note			-none
 */

uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef * GPIOx, uint16_t PinNumber ){
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
	uint8_t PinStatues ;
	// mask bit number
	if(((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <MCAL_GPIO_ReadPin+0x1e>
		PinStatues = GPIO_PIN_SET;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e001      	b.n	80009de <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		PinStatues = GPIO_PIN_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
	}
	return PinStatues;
 80009de:	7bfb      	ldrb	r3, [r7, #15]

}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr

080009ea <MCAL_GPIO_WritePin>:
 * @param [in]	-value : PIN value
 * @retval	 	-none
 * Note			-none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx , uint16_t PinNumber , uint8_t value){
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	707b      	strb	r3, [r7, #1]
	if(value != (uint8_t)GPIO_PIN_RESET){
 80009fa:	787b      	ldrb	r3, [r7, #1]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <MCAL_GPIO_WritePin+0x1e>
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit

			(GPIOx->BSRR) = (uint16_t)PinNumber ;
 8000a00:	887a      	ldrh	r2, [r7, #2]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	611a      	str	r2, [r3, #16]
//			0: No action on the corresponding ODRx bit
//			1: Reset the corresponding ODRx bit
			(GPIOx->BRR) = (uint16_t)PinNumber ;
		}

}
 8000a06:	e002      	b.n	8000a0e <MCAL_GPIO_WritePin+0x24>
			(GPIOx->BRR) = (uint16_t)PinNumber ;
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <MCAL_GPIO_WritePort>:
 * @param [in] 	-GPIOx where x can be (A...E depending on device used) to select GPIO peripheral.
 * @param [in]	-value : PORT value
 * @retval	 	-none
 * Note			-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef * GPIOx ,uint16_t value ){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32_t) value;
 8000a24:	887a      	ldrh	r2, [r7, #2]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <Clock_init>:




void Clock_init()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <Clock_init+0x24>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <Clock_init+0x24>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <Clock_init+0x24>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <Clock_init+0x24>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <GPIO_init>:


void GPIO_init()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	GPIO_PIN_Config_t PinCfg;

	//9->15 are for seven segment
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a66:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4827      	ldr	r0, [pc, #156]	; (8000b14 <GPIO_init+0xb8>)
 8000a76:	f7ff ff15 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2304      	movs	r3, #4
 8000a82:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a84:	2301      	movs	r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4821      	ldr	r0, [pc, #132]	; (8000b14 <GPIO_init+0xb8>)
 8000a8e:	f7ff ff09 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a96:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481b      	ldr	r0, [pc, #108]	; (8000b14 <GPIO_init+0xb8>)
 8000aa6:	f7ff fefd 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4815      	ldr	r0, [pc, #84]	; (8000b14 <GPIO_init+0xb8>)
 8000abe:	f7ff fef1 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000acc:	2301      	movs	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <GPIO_init+0xb8>)
 8000ad6:	f7ff fee5 	bl	80008a4 <MCAL_GPIO_Init>


	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ade:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <GPIO_init+0xb8>)
 8000aee:	f7ff fed9 	bl	80008a4 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2304      	movs	r3, #4
 8000afa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000afc:	2301      	movs	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <GPIO_init+0xb8>)
 8000b06:	f7ff fecd 	bl	80008a4 <MCAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <main>:



int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
	Clock_init();
 8000b1e:	f7ff ff89 	bl	8000a34 <Clock_init>
	GPIO_init();
 8000b22:	f7ff ff9b 	bl	8000a5c <GPIO_init>
	LCD_INIT();
 8000b26:	f7ff fd33 	bl	8000590 <LCD_INIT>

	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 8000b2a:	482c      	ldr	r0, [pc, #176]	; (8000bdc <main+0xc4>)
 8000b2c:	f7ff fdd2 	bl	80006d4 <LCD_WRITE_STRING>
	delay_ms(30);
 8000b30:	201e      	movs	r0, #30
 8000b32:	f7ff fc5d 	bl	80003f0 <delay_ms>
	LCD_clearscreen();
 8000b36:	f7ff fc9c 	bl	8000472 <LCD_clearscreen>

	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000b3a:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <main+0xc8>)
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	c303      	stmia	r3!, {r0, r1}
 8000b44:	801a      	strh	r2, [r3, #0]
 8000b46:	3302      	adds	r3, #2
 8000b48:	0c12      	lsrs	r2, r2, #16
 8000b4a:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000b4c:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <main+0xcc>)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b52:	c303      	stmia	r3!, {r0, r1}
 8000b54:	801a      	strh	r2, [r3, #0]
 8000b56:	3302      	adds	r3, #2
 8000b58:	0c12      	lsrs	r2, r2, #16
 8000b5a:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	77fb      	strb	r3, [r7, #31]
 8000b60:	e019      	b.n	8000b96 <main+0x7e>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000b62:	7ffb      	ldrb	r3, [r7, #31]
 8000b64:	3320      	adds	r3, #32
 8000b66:	443b      	add	r3, r7
 8000b68:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd8d 	bl	800068c <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9);
 8000b72:	7ffb      	ldrb	r3, [r7, #31]
 8000b74:	3320      	adds	r3, #32
 8000b76:	443b      	add	r3, r7
 8000b78:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	025b      	lsls	r3, r3, #9
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <main+0xd0>)
 8000b86:	f7ff ff47 	bl	8000a18 <MCAL_GPIO_WritePort>
		delay_ms(100);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f7ff fc30 	bl	80003f0 <delay_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	3301      	adds	r3, #1
 8000b94:	77fb      	strb	r3, [r7, #31]
 8000b96:	7ffb      	ldrb	r3, [r7, #31]
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d9e2      	bls.n	8000b62 <main+0x4a>

	}

	LCD_clearscreen();
 8000b9c:	f7ff fc69 	bl	8000472 <LCD_clearscreen>
	KEYPAD_INIT();
 8000ba0:	f7ff fae6 	bl	8000170 <KEYPAD_INIT>
	LCD_WRITE_STRING("Keypad is ready");
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <main+0xd4>)
 8000ba6:	f7ff fd95 	bl	80006d4 <LCD_WRITE_STRING>
	delay_ms(30);
 8000baa:	201e      	movs	r0, #30
 8000bac:	f7ff fc20 	bl	80003f0 <delay_ms>
	LCD_clearscreen();
 8000bb0:	f7ff fc5f 	bl	8000472 <LCD_clearscreen>

	while (1) {

		key_pressed = KEYPAD_GETCHAR();
 8000bb4:	f7ff fb52 	bl	800025c <KEYPAD_GETCHAR>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000bbc:	7fbb      	ldrb	r3, [r7, #30]
 8000bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc0:	d002      	beq.n	8000bc8 <main+0xb0>
 8000bc2:	2b7e      	cmp	r3, #126	; 0x7e
 8000bc4:	d103      	bne.n	8000bce <main+0xb6>
		case '~':
			break;
 8000bc6:	e007      	b.n	8000bd8 <main+0xc0>
		case '?':
			LCD_clearscreen();
 8000bc8:	f7ff fc53 	bl	8000472 <LCD_clearscreen>
			break;
 8000bcc:	e004      	b.n	8000bd8 <main+0xc0>
			//				    }
			//				    break;
			//
			//
			//			}
			LCD_WRITE_CHAR(key_pressed);
 8000bce:	7fbb      	ldrb	r3, [r7, #30]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd5b 	bl	800068c <LCD_WRITE_CHAR>
			break;
 8000bd6:	bf00      	nop
		key_pressed = KEYPAD_GETCHAR();
 8000bd8:	e7ec      	b.n	8000bb4 <main+0x9c>
 8000bda:	bf00      	nop
 8000bdc:	08000ca4 	.word	0x08000ca4
 8000be0:	08000cb8 	.word	0x08000cb8
 8000be4:	08000cc4 	.word	0x08000cc4
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	08000ca8 	.word	0x08000ca8

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f000 f811 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff ff79 	bl	8000b18 <main>

08000c26 <LoopForever>:

LoopForever:
  b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c34:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000c38:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c3c:	2000003c 	.word	0x2000003c

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2600      	movs	r6, #0
 8000c48:	4d0c      	ldr	r5, [pc, #48]	; (8000c7c <__libc_init_array+0x38>)
 8000c4a:	4c0d      	ldr	r4, [pc, #52]	; (8000c80 <__libc_init_array+0x3c>)
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	10a4      	asrs	r4, r4, #2
 8000c50:	42a6      	cmp	r6, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	f000 f81a 	bl	8000c8c <_init>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	4d0a      	ldr	r5, [pc, #40]	; (8000c84 <__libc_init_array+0x40>)
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <__libc_init_array+0x44>)
 8000c5e:	1b64      	subs	r4, r4, r5
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	42a6      	cmp	r6, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6c:	4798      	blx	r3
 8000c6e:	3601      	adds	r6, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c76:	4798      	blx	r3
 8000c78:	3601      	adds	r6, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08000cd0 	.word	0x08000cd0
 8000c80:	08000cd0 	.word	0x08000cd0
 8000c84:	08000cd0 	.word	0x08000cd0
 8000c88:	08000cd4 	.word	0x08000cd4

08000c8c <_init>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr

08000c98 <_fini>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr
